
R version 3.2.2 (2015-08-14) -- "Fire Safety"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "kmlbuilder"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> base::assign(".ExTimings", "kmlbuilder-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('kmlbuilder')
Loading required package: R.oo
Warning: package 'R.oo' was built under R version 3.2.3
Loading required package: R.methodsS3
Warning: package 'R.methodsS3' was built under R version 3.2.3
R.methodsS3 v1.7.0 (2015-02-19) successfully loaded. See ?R.methodsS3 for help.
R.oo v1.19.0 (2015-02-27) successfully loaded. See ?R.oo for help.

Attaching package: 'R.oo'

The following objects are masked from 'package:methods':

    getClasses, getMethods

The following objects are masked from 'package:base':

    attach, detach, gc, load, save

Loading required package: rgdal
Warning: package 'rgdal' was built under R version 3.2.3
Loading required package: sp
Warning: package 'sp' was built under R version 3.2.3
rgdal: version: 1.1-3, (SVN revision 594)
 Geospatial Data Abstraction Library extensions to R successfully loaded
 Loaded GDAL runtime: GDAL 2.0.1, released 2015/09/15
 Path to GDAL shared files: C:/Users/cameronbj/AppData/Local/Temp/3/RtmpwDrwhZ/RLIBS_23407e0b2ff/rgdal/gdal
 GDAL does not use iconv for recoding strings.
 Loaded PROJ.4 runtime: Rel. 4.9.1, 04 March 2015, [PJ_VERSION: 491]
 Path to PROJ.4 shared files: C:/Users/cameronbj/AppData/Local/Temp/3/RtmpwDrwhZ/RLIBS_23407e0b2ff/rgdal/proj
 Linking to sp version: 1.2-1 

Attaching package: 'rgdal'

The following object is masked from 'package:R.oo':

    getDescription

Loading required package: RCurl
Warning: package 'RCurl' was built under R version 3.2.3
Loading required package: bitops
Warning: package 'bitops' was built under R version 3.2.3

Attaching package: 'RCurl'

The following object is masked from 'package:R.oo':

    clone

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("addAbstractView")
> ### * addAbstractView
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: addAbstractView
> ### Title: Add Abstract view to KML Object
> ### Aliases: addAbstractView
> 
> ### ** Examples
> 
> #Create the kml object
> twoViewskml = RKmlObject()
> #add an Astract view of type lookat. look east, at 70 degrees 
> #upward, 1000 meters away from the defined position(latitude, 
> #longitude, altitude) 
> twoViewskml$addAbstractView(type = "lookat", viewid = "sable_lookat", latitude = 43.94, longitude = -60.1, altitude = 1000, altitudeMode = "relativeToGround", heading = 90, tilt = 70, range = 1000)
> 
> #add an Astract view of type camera. position camera at defined position(latitude, 
> #longitude, altitude) then point camera east look up 50 degrees and roll to the left slightly  
> twoViewskml$addAbstractView(type = "camera", viewid = "sable_camera", latitude = 43.94, longitude = -60.1, altitude = 5000, altitudeMode = "relativeToGround", heading = 90,  tilt = 50, roll = 40)
> #Add 2 folders each with one of the above abstractviews associated with it. Click on folder in tree to fly to view.
> twoViewskml$addFolder("lookat", name = "lookat example", description = "Click on this folder to fly to the lookat example", AbstractView = "sable_lookat", open = 1)
> twoViewskml$addFolder("camera", name = "camera example", description = "Click on this folder to fly to the camera example", AbstractView = "sable_camera", open = 1)
> #twoViewskml$preview()
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("addAbstractView", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("addBalloonStyle")
> ### * addBalloonStyle
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: addBalloonStyle
> ### Title: Add BalloonStyle to KML Object
> ### Aliases: addBalloonStyle
> 
> ### ** Examples
> 
> 
> mykml = RKmlObject()
> customtext = "This is the $[name]. <br/> Click on this to look at $[description]. <br/> See references for more custom text insert  options."
>  
> mykml$addBalloonStyle(styleid = "colorstyle1", bgColor = "violetred4", textColor = rgb(.2, .2, 1))
> mykml$addBalloonStyle(styleid = "textstyle1", bgColor = "black", textColor = "white", text = customtext, displayMode = "display")
>  
> x = data.frame(cbind(c(45.9178, 46.807), c(-59.967, -60.321), c("colorstyle1", "textstyle1"), c("Color Example", "Text Example"), c("Louisbourg", "Neil's Harbour" )))
> names(x) = c("lat", "lon", "styleUrl", "name", "description")
>   
> mykml$addPoint(x)
> #mykml$preview()
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("addBalloonStyle", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("addFolder")
> ### * addFolder
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: addFolder, getFolder, removeFolder
> ### Title: Add Return and Remove Folder to and from KML file Structure
> ### Aliases: 'addFolder, getFolder, removeFolder'
> 
> ### ** Examples
> 
> 
> mykml = RKmlObject()
> 
> mykml$addFolder(fid = "2013", name = "2013") #Demonstrate adding folder
> mykml$getFolder("2013")$addFolder(fid = "survey_data", name = "survey data") #Demonstrate adding nested folder
> 
> ##Demonstrate variable assignment of folder object##
> sur2013 = mykml$getFolder("2013")$getFolder("survey_data") 
> sur2013$addFolder(fid = "harbour")
> 
> mykml$getFolder("2013")$removeFolder("survey_data") #Demonstrate remove folder
> mykml$getFolder("2013")$addFolder(fid = "survey_data", name = "survey data")
> sur2013 = mykml$getFolder("2013")$getFolder("survey_data")
> sur2013$addFolder(fid = "ports", name = "ports")
> 
> x = data.frame(cbind(c(45.9178, 46.807), c(-59.967, -60.321)))
> names(x) = c("lat", "lon")
> 
> sur2013$getFolder("ports")$addPoint(x) #Demonstrate add data to folder
> 
> #mykml$preview()
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("addFolder", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("addGroundOverlay")
> ### * addGroundOverlay
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: addGroundOverlay
> ### Title: Add a Ground Overlay to kml
> ### Aliases: addGroundOverlay
> 
> ### ** Examples
> 
> 
> mykml = RKmlObject()
> mykml$addAbstractView(type = "lookat", viewid = "Rview", latitude = 45.5, longitude = -62, range = 1000000)
> 
> fn = file.path(R.home(), "doc", "html", "logo.jpg")
> mykml$addGroundOverlay(fn = fn, east = -63, west = -61, north = 46.5, south = 44.5, 
+   transparency = .3, color = "red", name = "RedR", AbstractView = "Rview" )
> 
> #mykml$preview()
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("addGroundOverlay", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("addIconStyle")
> ### * addIconStyle
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: addIconStyle
> ### Title: Add IconStyle to KML Object
> ### Aliases: addIconStyle
> 
> ### ** Examples
> 
> 
> mykml = RKmlObject()
> 
> fishpath = "http://maps.google.com/mapfiles/ms/micons/fishing.png" 
> mykml$addIconStyle(styleid = "iconstyle1", href = fishpath, color = "red", scale = 5, heading = 180)
> mykml$addIconStyle(styleid = "iconstyle2", href = fishpath, color = "blue", scale = 1, heading = 0)
>  
> x = data.frame(cbind(c(45.9178, 46.807), c(-59.967, -60.321), c("iconstyle1", "iconstyle2"), c("red fishing", "blue fishing"), c("Louisbourg", "Neil's Harbour" )))
> names(x) = c("lat", "lon", "styleUrl", "name", "description")
>   
> mykml$addPoint(x)
> #mykml$preview()
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("addIconStyle", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("addLabelStyle")
> ### * addLabelStyle
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: addLabelStyle
> ### Title: Add LabelStyle to KML Object
> ### Aliases: addLabelStyle
> 
> ### ** Examples
> 
> 
> mykml = RKmlObject()
> 
> 
> mykml$addLabelStyle(styleid = "labelstyle1", color = "red", transparency = .2, scale = 3)
> mykml$addLabelStyle(styleid = "labelstyle2", color = "green", transparency = 1, scale = 1)
>  
> x = data.frame(cbind(c(45.9178, 46.807), c(-59.967, -60.321), c("labelstyle1", "labelstyle2"), c("Example1", "Example2"), c("Louisbourg", "Neil's Harbour" )))
> names(x) = c("lat", "lon", "styleUrl", "name", "description")
>   
> mykml$addPoint(x)
> #mykml$preview()
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("addLabelStyle", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("addLineString")
> ### * addLineString
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: addLineString
> ### Title: Add LineString features to a kml
> ### Aliases: addLineString
> 
> ### ** Examples
> 
> 
> mykml = RKmlObject()
> 
> pid = c(1, 1, 1, 2, 2, 6, 6, 6, 6)
> lat = c(44, 44.1, 44, 44.2, 44.2, 44, 44.3, 44.3, 44)
> lon = c(-60, -59.9, -59.8, -60, -59.8, -60.4, -60, -59.8, -59.4)
> altitude = c(1000, 1000, 500, 500, 2000, 2000, 1500, 500, 2000)
> x = cbind(pid, lat, lon, altitude)
> 
> mykml$addLineString(x, altitudeMode = "relativeToGround")
> 
> #Create styles
> mykml$addLineStyle(styleid = "linestyle1", color = "red", transparency = .5, width = 100, outerColor = "orange", outerTransparency = 1, outerPortion = .5)
> mykml$addLineStyle(styleid = "linestyle2", color = "yellow", transparency = 1, width = 50, outerColor = "green", outerTransparency = 1, outerPortion = .2)
> mykml$addLineStyle(styleid = "linestyle3", color = "#0000ff", transparency = 1)
> 
> #Shift lats up to see style applied next to non style
> lat = lat + .02
> 
> x = cbind(pid, lat,  lon)
> altitude = c(1000, 500, 0)
> style = c("linestyle1", "linestyle2", "linestyle3") #Cycles with pid
> mykml$addLineString(x, styleUrl = style, altitude = altitude, altitudeMode = "relativeToGround")
> #OR apply 1 altitude to each pid
> #mykml$addLineString(x, styleUrl = style, altitude = 1000, altitudeMode = "relativeToGround")
> 
> ##All optional arguments can be supplied in the function call and will cycle by pid
> #mykml$preview()
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("addLineString", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("addLineStyle")
> ### * addLineStyle
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: addLineStyle
> ### Title: Add LineStyle to KML Object
> ### Aliases: addLineStyle
> 
> ### ** Examples
> 
> 
> mykml = RKmlObject()
> 
> pid = c(1, 1, 1, 2, 2, 6, 6, 6, 6)
> lat = c(44, 44.1, 44, 44.2, 44.2, 44, 44.3, 44.3, 44)
> lon = c(-60, -59.9, -59.8, -60, -59.8, -60.4, -60, -59.8, -59.4)
> x = cbind(pid, lat, lon)
> 
> mykml$addLineString(x)
> 
> #Create styles
> mykml$addLineStyle(styleid = "linestyle1", color = "red", transparency = .5, width = 100, outerColor = "orange", outerTransparency = 1, outerPortion = .5)
> mykml$addLineStyle(styleid = "linestyle2", color = "yellow", transparency = 1, width = 50, outerColor = "green", outerTransparency = 1, outerPortion = .2)
> mykml$addLineStyle(styleid = "linestyle3", color = "#0000ff", transparency = 1, labelVisibility = 1)
> 
> #Shift lats up to see style applied next to non style
> lat = lat + .02
> 
> styleUrl = c("linestyle1", "linestyle1", "linestyle1", "linestyle2", "linestyle2", "linestyle3", "linestyle3", "linestyle3", "linestyle3")
> x = cbind(pid, lat, lon, styleUrl)
> mykml$addLineString(x, name = "hello world")
> 
> #Same as above but without redundant styleURL
> #x = cbind(pid, lat,  lon)
> #style = c("linestyle1", "linestyle2", "linestyle3") #Cycles with pid
> #mykml$addLineString(x, styleUrl = style)
> #OR apply 1 altitude to each pid
> #mykml$addLineString(x, styleUrl = style, altitude = 1000)
> 
> ##All optional arguments can be supplied in the function call and will cycle by pid
> #mykml$preview()
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("addLineStyle", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("addListStyle")
> ### * addListStyle
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: addListStyle
> ### Title: Add ListStyle to KML Object
> ### Aliases: addListStyle
> 
> ### ** Examples
> 
> 
> mykml = RKmlObject()
> 
> #Create a radio style to allow only one element of a container to be displayed at a time
> mykml$addListStyle(styleid = "test", bgColor = "green", listItemType = "radioFolder")
> mykml$addPolyStyle(styleid = "mystyle2", color = "yellow", transparency = 1, fill = 0)
> mykml$addFolder(fid = "new", styleUrl = "test")
> mykml$getFolder("new")$addFolder("1")
> mykml$getFolder("new")$addFolder("2")
> mykml$getFolder("new")$addFolder("3")
>  
> #mykml$preview()
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("addListStyle", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("addNetworkLink")
> ### * addNetworkLink
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: addNetworkLink
> ### Title: Add NetworkLink
> ### Aliases: addNetworkLink
> 
> ### ** Examples
> 
> ### Simple example ###
> mykml = RKmlObject()
> mykml$addFolder("MyNetworkLinks", name = "NetworkLinks")
> 
> #Environment Canada GoeMet service
> path2kmz = "www.ec.gc.ca/meteo-weather/C0D9B3D8-D256-407D-A68F-C606D703105E/GeoMet-E.kmz" 
> 
> mykml$getFolder("MyNetworkLinks")$addNetworkLink(href = path2kmz, name= "GeoMet")
> #mykml$preview()
> 
> ### End Simple Example ###
> 
> 
> 
> 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("addNetworkLink", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("addNetworkLinkControl")
> ### * addNetworkLinkControl
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: addNetworkLinkControl
> ### Title: Add NetworkLink Control
> ### Aliases: addNetworkLinkControl
> 
> ### ** Examples
> 
> 
> ## Changes view after 20 seconds
> 
> #Create the hosted kml
> hostkml = RKmlObject()
> #add an Astract view
> hostkml$addAbstractView(type = "lookat", viewid = "sable_view", latitude = 43.9, longitude = -59.9, range = 100000)
> hostkml$addNetworkLinkControl(minRefreshPeriod = 20, maxSessionLength = 60, message = "Welcome to the example Network Control kml. This kml will only stay linked for 60 seconds", linkName = "Sable Island", linkDescription = "You will soon fly to St.Paul's Island", linkSnippet = "buckle your seatbelt", AbstractView = "sable_view")
> #hostkml$writekml("hostkml.kml")
> 
> #Create a client kml
> clientkml = RKmlObject()
> 
> #kml client will attempt to refresh every second but will fail due to hosts minRefreshPeriod
> clientkml$addNetworkLink(href = "hostkml.kml",flyToView = 1, refreshMode = "onInterval", refreshInterval = 1)
> #clientkml$preview()
> 
> #Change the abstract view, should update in the preview of the clientkml after 20 seconds from the clientkml #linking to the host kml
> 
> hostkml$addAbstractView(type = "lookat", viewid = "stPaulsView", latitude = 47.2, longitude = -60.15, range = 10000)
> hostkml$addNetworkLinkControl(minRefreshPeriod = 20, maxSessionLength = 60, message = "Welcome to the example Network Control kml. This kml will only stay linked for 60 seconds", linkName = "St.Paul's Island", linkDescription = "The link will expire in 40 seconds", linkSnippet = "watch your step", AbstractView = "stPaulsView")
> 
> #hostkml$writekml("hostkml.kml")
> 
> 
> ### End Example ###
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("addNetworkLinkControl", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("addPoint")
> ### * addPoint
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: addPoint
> ### Title: Add Point Features
> ### Aliases: addPoint
> 
> ### ** Examples
> 
> 
> mykml = RKmlObject()
> 
> 
> imagepath = "http://maps.google.com/mapfiles/kml/paddle/wht-circle-lv.png" 
> mykml$addIconStyle(styleid = "mystyle", color = "salmon2", href = imagepath, scale = .5, colorMode = "random")
> mykml$addLabelStyle(styleid = "mystyle", color = "#000000", transparency = .8, scale = 1)
> 
> lat = c(44, 44.1, 44, 44.2, 44.2, 44, 44.3, 44.3, 44)
> lon = c(-60, -59.9, -59.8, -60, -59.8, -60.4, -60, -59.8, -59.4)
> extrude = c(0, 0, 1, 1, 1, 0, 0, 1, 0)
> altitude = c(1000, 800, 1000, 1000, 1200, 5000, 5000, 10000, 10000)
> name = c("p1","p2","p3","p4","p5","p6","p7","p8","p9")
> x = cbind(lat, lon, extrude, altitude, name)
>   
> mykml$addPoint(x, styleUrl = "mystyle", description = "This is an example description applied to all points", altitudeMode = "relativeToGround")
> #mykml$preview()
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("addPoint", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("addPolyStyle")
> ### * addPolyStyle
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: addPolyStyle
> ### Title: Add PolyStyle to KML Object
> ### Aliases: addPolyStyle
> 
> ### ** Examples
> 
> 
> mykml = RKmlObject()
> 
> #Create styles
> mykml$addPolyStyle(styleid = "mystyle1", color = "red", transparency = .5)
> mykml$addPolyStyle(styleid = "mystyle2", color = "yellow", transparency = 1, fill = 0)
> mykml$addPolyStyle(styleid = "mystyle3", color = "yellow", transparency = 1, outline = 0)
> 
> pid = c(1, 1, 1, 2, 2, 2, 6, 6, 6, 6)
> lat = c(44, 44.1, 44, 44.2, 44.2, 44.1, 44, 44.1, 44.1, 44)
> lon = c(-60, -59.9, -59.8, -60.2, -60.1, -60, -60.5, -60.5, -60.2, -60.2)
> 
> x = cbind(pid, lat, lon)
> 
> style = c("mystyle1", "mystyle2", "mystyle3") #Cycles with pid
> altitude = c(2000, 4000, 8000) #Cycles with pid
> 
> 
> mykml$addPolygon(x, styleUrl = style, altitude = altitude)
> 
> mykml$addLabelStyle(styleid = "mystyle1", color = "red", transparency = .2, scale = 3)
> mykml$addLabelStyle(styleid = "mystyle2", color = "green", transparency = 1, scale = 1)
>  
> #mykml$preview()
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("addPolyStyle", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("addPolygon")
> ### * addPolygon
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: addPolygon
> ### Title: Add Polygon features to a kml
> ### Aliases: addPolygon
> 
> ### ** Examples
> 
> 
> mykml = RKmlObject()
> 
> pid = c(1, 1, 1, 2, 2, 2, 6, 6, 6, 6)
> lat = c(44, 44.1, 44, 44.2, 44.2, 44.1, 44, 44.1, 44.1, 44)
> lon = c(-60, -59.9, -59.8, -60.2, -60.1, -60, -60.5, -60.5, -60.2, -60.2)
> altitude=c(2000,2000,4000,4000,5000,2000,0,0,0,0)
> x = cbind(pid, lat, lon, altitude)
> 
> mykml$addPolygon(x)
> 
>   
> #Create styles
> mykml$addPolyStyle(styleid = "polystyle1", color = "red", transparency = .5)
> mykml$addPolyStyle(styleid = "polystyle2", color = "yellow", transparency = 1, fill = 0)
> mykml$addPolyStyle(styleid = "polystyle3", color = "yellow", transparency = 1, outline = 0)
> 
> #Shift lats up to see style applied next to non style
> lat = lat + .2
> 
> x = cbind(pid, lat, lon)
> 
> style = c("polystyle1", "polystyle2", "polystyle3") #Cycles with pid
> ##Add altitude
> altitude = c(2000, 4000, 8000) #Cycles with pid
> mykml$addPolygon(x, styleUrl = style, altitude = altitude)
> 
> ##All optional arguments can be supplied in the function call and will cycle by pid
> #mykml$preview()
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("addPolygon", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("addScreenOverlay")
> ### * addScreenOverlay
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: addScreenOverlay
> ### Title: Add a Screen Overlay to kml
> ### Aliases: addScreenOverlay
> 
> ### ** Examples
> 
> png(filename="figure.png", height=200, width=300, 
+     bg="transparent")
> plot(1, type="n", axes=FALSE, xlab="", ylab="")
> legend(1, 1, legend = c("Hello", "World"), col=1:2, lwd=2, cex=3, xjust=0.5, yjust=0.5)
> dev.off()
pdf 
  2 
> mykml = RKmlObject()
> fn = file.path(getwd(), "figure.png")
> mykml$addScreenOverlay(fn, size_x = .2, size_y = .2)
> 
> #mykml$preview()
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("addScreenOverlay", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("addStyleMap")
> ### * addStyleMap
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: addStyleMap
> ### Title: Create Mouseover Effects with Style
> ### Aliases: addStyleMap
> 
> ### ** Examples
> 
> 
> mykml = RKmlObject()
> 
> #add styles. labelstyle1 will be the normal style, labelstyle2 will be the mouseover style
> mykml$addLabelStyle(styleid = "labelstyle1", color = "red", transparency = .5, scale = 1)
> mykml$addLabelStyle(styleid = "labelstyle2", color = "green", transparency = 1, scale = 2)
> 
> #make icon transparent(invisible) for the mouseover style
> mykml$addIconStyle(styleid = "labelstyle2", color = "white", transparency = 0)
> 
> #add map style so mouseover effects can be acheived
> mykml$addStyleMap(id = "my_mouseover_style", idn = "labelstyle1", idh = "labelstyle2")
> 
> #create points so styles can be visualized
> x = data.frame(cbind(c(45.9178, 46.807), c(-59.967, -60.321), c("Example1", "Example2"), c("Louisbourg", "Neil's Harbour" )))
> names(x) = c("lat", "lon", "name", "description")
> mykml$addPoint(x, styleUrl = "my_mouseover_style")
> 
> #sample your creation
> #mykml$preview()
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("addStyleMap", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("interactiveBalloonStyle")
> ### * interactiveBalloonStyle
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: interactiveBalloonStyle
> ### Title: Interactively Create BalloonStyle
> ### Aliases: interactiveBalloonStyle
> 
> ### ** Examples
> 
> 
> mykml = RKmlObject()
> 
> ##ANSWER THE QUESTIONS. For this example the answers are supplied below. Typically the questions
> ##will be answered on the fly. 
> 
> ## Not run: 
> ##D mykml$interactiveBalloonStyle(id = 'mystyle')
> ##D hello
> ##D black
> ##D red
> ##D Y
> ## End(Not run)
> 
> x = data.frame(cbind(c(45.9178, 46.807), c(-59.967, -60.321), c("Example1", "Example2"), c("Louisbourg", "Neil's Harbour" )))
> names(x) = c("lat", "lon", "name", "description")
>   
> mykml$addPoint(x, styleUrl = "mystyle")
Warning in addPoint.RKmlFolder(this, ...) :
  No style id found for 'mystyle'. You must create a style with yourkmlobj$createStyle(id = 'mystyle').
Warning in addPoint.RKmlFolder(this, ...) :
  No style id found for 'mystyle'. You must create a style with yourkmlobj$createStyle(id = 'mystyle').
> #mykml$preview()
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("interactiveBalloonStyle", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("interactiveIconStyle")
> ### * interactiveIconStyle
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: interactiveIconStyle
> ### Title: Interactively Create IconStyle
> ### Aliases: interactiveIconStyle
> 
> ### ** Examples
> 
> 
> mykml = RKmlObject()
> 
> ##ANSWER THE QUESTIONS. For this example the answers are supplied below. Typically the questions
> ##will be answered on the fly.
> ## Not run: 
> ##D mykml$interactiveIconStyle(id = "mystyle")
> ##D upload.wikimedia.org/wikipedia/commons/c/c1/Rlogo.png
> ##D 2
> ##D 180
> ##D Y
> ##D red
> ##D N
> ##D fraction
> ##D .5
> ##D fraction
> ##D .5
> ## End(Not run)
> x = data.frame(cbind(c(45.9178, 46.807), c(-59.967, -60.321), c("Example1", "Example2"), c("Louisbourg", "Neil's Harbour" )))
> names(x) = c("lat", "lon", "name", "description")
>   
> mykml$addPoint(x, styleUrl = "mystyle")
Warning in addPoint.RKmlFolder(this, ...) :
  No style id found for 'mystyle'. You must create a style with yourkmlobj$createStyle(id = 'mystyle').
Warning in addPoint.RKmlFolder(this, ...) :
  No style id found for 'mystyle'. You must create a style with yourkmlobj$createStyle(id = 'mystyle').
> #mykml$preview()
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("interactiveIconStyle", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("interactiveLabelStyle")
> ### * interactiveLabelStyle
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: interactiveLabelStyle
> ### Title: Interactively Create LabelStyle
> ### Aliases: interactiveLabelStyle
> 
> ### ** Examples
> 
> 
> mykml = RKmlObject()
> 
> ##ANSWER THE QUESTIONS. For this example the answers are supplied below. Typically the questions
> ##will be answered on the fly.
> ## Not run: 
> ##D mykml$interactiveLabelStyle(id = "mystyle")
> ##D orange
> ##D .3
> ##D 3
> ##D N
> ## End(Not run)
> x = data.frame(cbind(c(45.9178, 46.807), c(-59.967, -60.321), c("Example1", "Example2"), c("Louisbourg", "Neil's Harbour" )))
> names(x) = c("lat", "lon", "name", "description")
>   
> mykml$addPoint(x, styleUrl = "mystyle")
Warning in addPoint.RKmlFolder(this, ...) :
  No style id found for 'mystyle'. You must create a style with yourkmlobj$createStyle(id = 'mystyle').
Warning in addPoint.RKmlFolder(this, ...) :
  No style id found for 'mystyle'. You must create a style with yourkmlobj$createStyle(id = 'mystyle').
> #mykml$preview()
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("interactiveLabelStyle", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("interactiveLineStyle")
> ### * interactiveLineStyle
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: interactiveLineStyle
> ### Title: Interactively Create LineStyle
> ### Aliases: interactiveLineStyle
> 
> ### ** Examples
> 
> 
> mykml = RKmlObject()
> 
> ##ANSWER THE QUESTIONS. For this example the answers are supplied below. Typically the questions
> ##will be answered on the fly.
> ## Not run: 
> ##D mykml$interactiveLineStyle(id = "mystyle")
> ##D M
> ##D yellow
> ##D 1
> ##D grey
> ##D .8
> ##D 100
> ##D .8
> ##D N
> ##D Y
> ## End(Not run)
> x = data.frame(cbind(c(1, 1, 1), c(45.9178, 46.3624, 46.807), c(-59.967,-60.114, -60.321)))
> names(x) = c("pid", "lat", "lon")
>   
> mykml$addLineString(x, name= "fake road", description = "Louisbourg to Neil's Harbour", styleUrl = "mystyle", tessellate = 1 )
Warning in addLineString.RKmlFolder(this, ...) :
  No style id found for 'mystyle'. You must create a style with yourkmlobj$createStyle(id = 'mystyle').
> #mykml$preview()
> #Notice the line disapears on close zoom, this is an error in Google Earth. This can be mitigated by adding more #points along the line.  
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("interactiveLineStyle", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("interactivePolyStyle")
> ### * interactivePolyStyle
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: interactivePolyStyle
> ### Title: Interactively Create PolyStyle
> ### Aliases: interactivePolyStyle
> 
> ### ** Examples
> 
> 
> mykml = RKmlObject()
> 
> ##ANSWER THE QUESTIONS. For this example the answers are supplied below. Typically the questions
> ##will be answered on the fly.
> ## Not run: 
> ##D mykml$interactivePolyStyle(id = "mystyle")
> ##D red
> ##D .5
> ##D Y
> ##D N
> ##D N
> ## End(Not run)
> x = data.frame(cbind(c(1, 1, 1), c(45.9178, 46.3624, 46.807), c(-59.967,-60.114, -60.321)))
> names(x) = c("pid", "lat", "lon")
>   
> mykml$addPolygon(x, name= "poly1", description = "random polygon", styleUrl = "mystyle" )
Warning in addPolygon.RKmlFolder(this, ...) :
  No style id found for 'mystyle'. You must create a style with yourkmlobj$createStyle(id = 'mystyle').
> #mykml$preview()
> #Notice the line disapears on close zoom, this is an error in Google Earth. This can be mitigated by adding more #points along the line.  
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("interactivePolyStyle", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("kmlbuilder-package")
> ### * kmlbuilder-package
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: kmlbuilder-package
> ### Title: Create Keyhole Markup Language from R
> ### Aliases: kmlbuilder-package kmlbuilder
> ### Keywords: package
> 
> ### ** Examples
> 
> ###  SIMPLE EXAMPLE  ###
> mykml = RKmlObject() #Create kml object
> lat = lat = rep(seq(44, 45, .1), 11) #latitude 
> lon = rep(seq(-60, -61, -.1), 11) #longitude
> lon = lon[order(lon)]
> mykml$addPoint(x = cbind(lat, lon)) #add point features to kml
> #mykml$preview() #sample the kml, used default styles
> 
> ### END SIMPLE EXAMPLE  ###
> 
> 
> ### STYLE EXAMPLE  ###
> 
> #Create a RKmlObject
> mykml = RKmlObject()
> 
> #Icon for use in styles
> fishpath = "http://maps.google.com/mapfiles/ms/micons/fishing.png" 
> 
> #Create Styles
> mykml$addLabelStyle(styleid = "my_style", color = "red", transparency = .5, scale = .5)
> mykml$addIconStyle(styleid = "my_style", href = fishpath, color = "green", scale = 1, heading = 0)
> mykml$addPolyStyle(styleid = "my_style", color = "yellow", transparency = .9, outline = 0, fill = 1)
> mykml$addPolyStyle(styleid = "my_style2", color = "white", outline = 1, fill = 0)
> 
> #Create Folder Structure
> mykml$addFolder(fid = "2013", name = "2013") #Demonstrate adding folder
> mykml$getFolder("2013")$addFolder(fid = "survey_data", name = "survey data") #Demonstrate adding nested folder
> 
> # Assign Folder object to variable
> sur2013 = mykml$getFolder("2013")$getFolder("survey_data")
> 
> lat = c(45.15, 44.95)
> lon = c(-60.55, -60.15)
> name = c("location1", "location2" )
> TimeStamp = c("2013-09-20", "2013-10-22")
> 
> x = cbind(lat, lon, name, TimeStamp)
> 
> sur2013$addPoint(x, styleUrl = "my_style") #Demonstrate add data to folder
> 
> #one polygon inside another with different altitudes
> pid = c(1, 1, 1, 1, 6, 6, 6, 6)
> lat = c(45, 45.1, 45.1, 45, 45, 45.1, 45.1, 45)
> lon = c(-60.5, -60.5, -60.2, -60.2, -60.5, -60.5, -60.2, -60.2)
> x = cbind(pid, lat, lon)
> 
> #Define cut out polygon for polygon with pid = 1
> pid = c(1, 1, 1)
> lat = c(45.03, 45.06, 45.03)
> lon = c(-60.3, -60.35, -60.4)
> y = cbind(pid, lat, lon)
> 
> sty = c("my_style", "my_style2") #Cycles by pid
> alt = c(7000, 10000) #Cycles by pid
> mykml$addPolygon(x, y, styleUrl = sty, altitude = alt)
> 
> #mykml$preview()
> 
> ### END STYLE EXAMPLE ### 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("kmlbuilder-package", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("liststyles")
> ### * liststyles
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: liststyles
> ### Title: Print kml Styles
> ### Aliases: liststyles
> 
> ### ** Examples
> 
> 
> mykml = RKmlObject()
> mykml$addLineStyle(styleid = "mystyle", color = "red", transparency = .5, width = 100)
> mykml$addLineStyle(styleid = "yourstyle", color = "#0000ff", transparency = 1)
> 
> mykml$addPolyStyle(styleid = "mystyle", color = "red", transparency = 1, fill = 0)
> mykml$addPolyStyle(styleid = "yourstyle", color = "yellow", transparency = 1, outline = 0)
> 
> mykml$liststyles()
[1] "<Style id='mystyle'>"                                                                                       
[2] "<LineStyle><color>#800000ff</color><width>100</width><gx:labelVisibility>0</gx:labelVisibility></LineStyle>"
[3] "<PolyStyle><color>#ff0000ff</color><fill>0</fill><outline>1</outline></PolyStyle>"                          
[4] "</Style>"                                                                                                   
[1] "<Style id='yourstyle'>"                                                                                   
[2] "<LineStyle><color>#ffff0000</color><width>1</width><gx:labelVisibility>0</gx:labelVisibility></LineStyle>"
[3] "<PolyStyle><color>#ff00ffff</color><fill>1</fill><outline>0</outline></PolyStyle>"                        
[4] "</Style>"                                                                                                 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("liststyles", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("loadStyle")
> ### * loadStyle
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: writekml
> ### Title: Write kml Object to file
> ### Aliases: writekml
> 
> ### ** Examples
> 
> 
> mykml = RKmlObject()
> 
> 
> mykml$addLabelStyle(styleid = "labelstyle1", color = "red", transparency = .2, scale = 3)
> mykml$addLabelStyle(styleid = "labelstyle2", color = "green", transparency = 1, scale = 1)
>  
> x = data.frame(cbind(c(45.9178, 46.807), c(-59.967, -60.321), c("labelstyle1", "labelstyle2"), c("Example1", "Example2"), c("Louisbourg", "Neil's Harbour" )))
> names(x) = c("lat", "lon", "styleUrl", "name", "description")
>   
> mykml$addPoint(x)
> #mykml$writekml(path = file.path(getwd(), "kml_outputs", "example_kml.kml"))
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("loadStyle", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("preview")
> ### * preview
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: preview
> ### Title: Preview a kml Object
> ### Aliases: preview
> 
> ### ** Examples
> 
> 
> mykml = RKmlObject()
> 
> mykml$addFolder(fid = "EMPTY", name = "EMPTY")
> x = data.frame(cbind(c(45.9178, 46.807), c(-59.967, -60.321)))
> names(x) = c("lat", "lon")
> mykml$addPoint(x)
> #mykml$preview()
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("preview", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("removeStyle")
> ### * removeStyle
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: removeStyle
> ### Title: Remove Style
> ### Aliases: removeStyle
> 
> ### ** Examples
> 
> 
> mykml = RKmlObject()
> 
> mykml$addLineStyle(styleid = "mystyle", color = "red", transparency = .5, width = 100)
> mykml$addLineStyle(styleid = "yourstyle", color = "#0000ff", transparency = 1)
> 
> mykml$addPolyStyle(styleid = "mystyle", color = "red", transparency = 1, fill = 0)
> mykml$addPolyStyle(styleid = "yourstyle", color = "yellow", transparency = 1, outline = 0)
> 
> mykml$liststyles()
[1] "<Style id='mystyle'>"                                                                                       
[2] "<LineStyle><color>#800000ff</color><width>100</width><gx:labelVisibility>0</gx:labelVisibility></LineStyle>"
[3] "<PolyStyle><color>#ff0000ff</color><fill>0</fill><outline>1</outline></PolyStyle>"                          
[4] "</Style>"                                                                                                   
[1] "<Style id='yourstyle'>"                                                                                   
[2] "<LineStyle><color>#ffff0000</color><width>1</width><gx:labelVisibility>0</gx:labelVisibility></LineStyle>"
[3] "<PolyStyle><color>#ff00ffff</color><fill>1</fill><outline>0</outline></PolyStyle>"                        
[4] "</Style>"                                                                                                 
> 
> mykml$removeStyle(styleid = 'yourstyle')
> mykml$removeStyle(styleid = 'mystyle', styletype = "PolyStyle")
> 
> mykml$liststyles()
[1] "<Style id='mystyle'>"                                                                                       
[2] "<LineStyle><color>#800000ff</color><width>100</width><gx:labelVisibility>0</gx:labelVisibility></LineStyle>"
[3] "</Style>"                                                                                                   
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("removeStyle", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("saveStyle")
> ### * saveStyle
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: saveStyle, loadStyle
> ### Title: Write/load kml style Object to/from file
> ### Aliases: 'saveStyle, loadStyle'
> 
> ### ** Examples
> 
> 
> xmaskml = RKmlObject()
> path = file.path(getwd(), "xmas_style")
> 
> xmaskml$addLabelStyle(styleid = "redlabel", color = "red", transparency = .2, scale = 3)
> xmaskml$addLabelStyle(styleid = "greenlabel", color = "green", transparency = 1, scale = 1)
> #xmaskml$saveStyle(path)
> 
> 
> port_starboard_kml = RKmlObject()
> port_starboard_kml$addLabelStyle(styleid = "yellowlabel", color = "yellow", transparency = .2, scale = 3)
> #port_starboard_kml$loadStyle(path) 
> port_starboard_kml$liststyles()
[1] "<Style id='yellowlabel'>"                                                                      
[2] "<LabelStyle><color>#3300ffff</color><colorMode>normal</colorMode><scale>3</scale></LabelStyle>"
[3] "</Style>"                                                                                      
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("saveStyle", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("styleBuilder")
> ### * styleBuilder
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: styleBuilder
> ### Title: Interactive Style Builder
> ### Aliases: styleBuilder
> 
> ### ** Examples
> 
> mykml = RKmlObject()
> 
> ##ANSWER THE QUESTIONS. For this example the answers are supplied below. Typically the questions
> ##will be answered on the fly.
> ## Not run: 
> ##D mykml$styleBuilder()
> ##D ms
> ##D Y
> ##D nms
> ##D mms
> ##D Y
> ##D Hello World
> ##D green
> ##D red
> ##D Y
> ##D N
> ##D Y
> ##D purple
> ##D 9
> ##D 1.1
> ##D N
> ##D N
> ##D N
> ##D Y
> ##D Hello Google
> ##D red
> ##D green
> ##D Y
> ##D N
> ##D N
> ##D N
> ##D N
> ##D 
> ## End(Not run)
> lat = c(44, 44.1, 44, 44.2, 44.2, 44, 44.3, 44.3, 44)
> lon = c(-60, -59.9, -59.8, -60, -59.8, -60.4, -60, -59.8, -59.4)
> extrude = c(0, 0, 1, 1, 1, 0, 0, 1, 0)
> altitude = c(100, 80, 100, 100, 120, 500, 500, 1000, 1000)
> name = c("p1","p2","p3","p4","p5","p6","p7","p8","p9")
> x = cbind(lat, lon, extrude, altitude, name)
>   
> mykml$addPoint(x, styleUrl = "ms", description = "This is an example description applied to all points")
Warning in addPoint.RKmlFolder(this, ...) :
  No style id found for 'ms'. You must create a style with yourkmlobj$createStyle(id = 'ms').
Warning in addPoint.RKmlFolder(this, ...) :
  No style id found for 'ms'. You must create a style with yourkmlobj$createStyle(id = 'ms').
Warning in addPoint.RKmlFolder(this, ...) :
  No style id found for 'ms'. You must create a style with yourkmlobj$createStyle(id = 'ms').
Warning in addPoint.RKmlFolder(this, ...) :
  No style id found for 'ms'. You must create a style with yourkmlobj$createStyle(id = 'ms').
Warning in addPoint.RKmlFolder(this, ...) :
  No style id found for 'ms'. You must create a style with yourkmlobj$createStyle(id = 'ms').
Warning in addPoint.RKmlFolder(this, ...) :
  No style id found for 'ms'. You must create a style with yourkmlobj$createStyle(id = 'ms').
Warning in addPoint.RKmlFolder(this, ...) :
  No style id found for 'ms'. You must create a style with yourkmlobj$createStyle(id = 'ms').
Warning in addPoint.RKmlFolder(this, ...) :
  No style id found for 'ms'. You must create a style with yourkmlobj$createStyle(id = 'ms').
Warning in addPoint.RKmlFolder(this, ...) :
  No style id found for 'ms'. You must create a style with yourkmlobj$createStyle(id = 'ms').
> #mykml$preview()
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("styleBuilder", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("writekml")
> ### * writekml
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: writekml
> ### Title: Write kml Object to file
> ### Aliases: writekml
> 
> ### ** Examples
> 
> 
> mykml = RKmlObject()
> 
> 
> mykml$addLabelStyle(styleid = "labelstyle1", color = "red", transparency = .2, scale = 3)
> mykml$addLabelStyle(styleid = "labelstyle2", color = "green", transparency = 1, scale = 1)
>  
> x = data.frame(cbind(c(45.9178, 46.807), c(-59.967, -60.321), c("labelstyle1", "labelstyle2"), c("Example1", "Example2"), c("Louisbourg", "Neil's Harbour" )))
> names(x) = c("lat", "lon", "styleUrl", "name", "description")
>   
> mykml$addPoint(x)
> #mykml$writekml(path = file.path(getwd(), "kml_outputs", "example_kml.kml"))
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("writekml", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.75 0.09 1.09 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
