{
    "contents" : "library(\"R.oo\")\nlibrary(\"rgdal\")\nlibrary(\"RCurl\")\n\nsetConstructorS3(\"RKmlFolder\", function(id = \"\", parent = NULL) {\n  R.oo::extend(Object(), \"RKmlFolder\",\n               .id = id,\n               .folders = list(),    #List to hold Folders objects\n               .points = list(),     #List to hold points\n               .foldertxt = \"\",\n               .parent = parent\n               \n                           \n  )\n})\n\n\n#Construct the Agent Object. The agent object is extended by most \n#other objects in this simulation. They will inherit the folllowing \n#variables and methods listed in this file. \nsetConstructorS3(\"RKmlObject\", function(id = \"\") {\n  R.oo::extend(RKmlFolder(), \"RKmlObject\", \n               .id = id,\n               .styles = list(),     #List to hold styles\n               .Aviewlist = list(),   #List to hold Abstract views\n               .networkcontroltxt = \"\"\n               \n  )\n})\nsetMethodS3(\"styleBuilder\", \"RKmlFolder\", function(this, ...) {\n  print(\"Welcome to the interactive style builder. Plase answer the following questions. Some questions can be skipped by hitting the enter button, defaults will be assumed.\")\n  id = \"\"\n  while(id == \"\"){\n  id = trim(readline(\"Please type an id for this style: \"))  \n  if(id == \"\")print(\"You must type an id\")\n  }\n  ida = id\n  idh = \"\"\n  idn = \"\"\n    \n  tmp = this\n  while(!is.null(tmp$.parent)) tmp = tmp$.parent\n  while(id %in% names(tmp$.styles)){\n    print(\"This style already exists, please try again.\")\n    id = readline(\"Please type an id for this style: \") \n   \n  }\n  \n  mo = toupper(readline(\"Would you like some features of this style to have mouse over effects, Y or N? \"))\n  if(mo == \"Y\") mo = T\n  else mo = F\n  \n  if(mo){\n    idn = readline(\"Please type an id for the non-mouseover style: \")  \n    while(id == \"\"){\n    while(idn %in% names(tmp$.styles)){\n      print(\"This style already exists, please try again.\")\n      idn = readline(\"Please type an id for the non-mouseover style: \")  \n    }\n    if(id == \"\")print(\"You must type an id\")\n    }\n  idh = readline(\"Please type an id for the mouseover style: \")\n    while(id == \"\"){\n      while(idh %in% names(tmp$.styles)){\n        print(\"This style already exists, please try again.\")\n        idh = readline(\"Please type an id for the mouseover style: \")  \n      }\n      if(id == \"\")print(\"You must type an id\")\n    }\n\n  }\n  \nstyle = c(\"<Style id='..rep..'>\", \"</Style>\")\nstyleh = style\n  \nif(mo){\n  ind = grep(\"Style id\", style)\n  style[ind] = gsub(\"..rep..\", idn, style[ind])  \n  ind = grep(\"Style id\", styleh)\n  styleh[ind] = gsub(\"..rep..\", idh, styleh[ind])  \n}\nelse{\n  ind = grep(\"Style id\", style)\n  style[ind] = gsub(\"..rep..\", ida, style[ind])     \n}\n \n  \nif(mo){\n  print(\"You will now create the non-mouseover style\")\n  id = idn\n  end = 2\n}\nelse{\n  print(\"You will now create the style\")\n  id = ida \n  end = 1\n}\n   \n\nn=0\nwhile(n < end){\n  if(n == 1){\n     print(\"You will now create the mouseover style\")\n     id = idh\n     style = styleh\n  }\n\n  again = T\n  while(again){  \nAA =  toupper(readline(\"Would you like to customize the balloon style, Y or N ? \")  )\nind = grep(\"BalloonStyle\", style)\n\nswitch(AA, \n  Y={\n    this$interactiveBalloonStyle(id)\n    again = F\n  },\n  N={\n    again = F\n  },\n  {\n  print('You must type either Y or N')\n  }\n)\n}\nind = grep(\"IconStyle\", style)\n  \n  again = T\n  while(again){  \nAA = toupper(readline(\"Would you like to customize the icon style, Y or N ? \")  )\nswitch(AA, \n  Y={\n  this$interactiveIconStyle(id)\n  again = F\n  },\n  N={\n  again = F\n  },\n  {\n  print('You must type either Y or N')\n  }\n)\n}\nind = grep(\"LabelStyle\", style)\n  \n  again = T\n  while(again){  \nAA = toupper(readline(\"Would you like to customize the label style, Y or N ? \")  )\nswitch(AA, \n       Y={\n         this$interactiveLabelStyle(id)\n         again = F\n       },\n       N={\n        again = F\n       },\n{\n  print('You must type either Y or N')\n}\n)\n}\nind = grep(\"LineStyle\", style)\n  \n  again = T\n  while(again){  \nAA =  toupper(readline(\"Would you like to customize the line style, Y or N ? \")  )\nswitch(AA, \n       Y={\n         this$interactiveLineStyle(id)\n         again = F\n       },\n       N={\n         again = F\n       },\n{\n  print('You must type either Y or N')\n}\n)\n}\nind = grep(\"PolyStyle\", style)\n  \n  again = T\n  while(again){  \nAA =  toupper(readline(\"Would you like to customize Polygon style, Y or N ? \")  )\nswitch(AA, \n  Y={\n    this$interactivePolyStyle(id)\n    again = F\n  },\n  N={\n    again = F\n  },\n  {\n  print('You must type either Y or N')\n  }\n)\n}\n  n = n + 1\n}\n  if(mo){\n    tmp$addStyleMap(id = ida, idn = idn, idh = idh )\n  }\n  \n})\nsetMethodS3(\"interactiveLabelStyle\", \"RKmlFolder\", function(this, id, ...) {\n  \n  ret = \"\"\n  tmp = this\n  \n  while(!is.null(tmp$.parent)) tmp = tmp$.parent\n\n\n      mc = readline(\"   What color would you like the label to be? \")\n      mt = readline(\"   What transparency would you like the label to be (0.0 - 1.0)? \")\n      ms = readline(\"   What scale would you like the label to be (default is 1.0)? \")\n    \n      colmod = readline(\"   Would you like to change the color mode to random(random based on color, use white for true random) (Y or N)? \")\n      if(colmod == \"Y\") colmod = \"random\"\n      else colmod = \"normal\"\n          \n      tmp$addLabelStyle(styleid = id, color = mc, transparency = mt, colorMode = colmod, scale = ms)\n       \n\n  })\nsetMethodS3(\"interactivePolyStyle\", \"RKmlFolder\", function(this, id,  ...) {\n  \n  \n  ret = \"\"\n  tmp = this\n  \n  while(!is.null(tmp$.parent)) tmp = tmp$.parent\n  \n  \n  mc = readline(\"   What color would you like the polygon to be? \")\n  mt = readline(\"   What transparency would you like the polygon to be (0.0 - 1.0)? \")\n  mf = readline(\"   Would you like to fill the polygon with the specified color (Y or N)? \")\n  ml = readline(\"   Would you like the polygon to be outlined? (uses linestyle, Y or N)? \")\n  \n  colmod = readline(\"   Would you like to change the color mode to random(random based on color, use white for true random) (Y or N)? \")\n  if(colmod == \"Y\") colmod = \"random\"\n  else colmod = \"normal\"\n  \n  if(mf == \"Y\") mf = \"1\"\n  else mf = \"0\"\n  \n  if(ml == \"Y\") ml = \"1\"\n  else ml = \"0\"\n  \n  tmp$addPolyStyle(styleid = id, color = mc, transparency = mt, colorMode = colmod, fill = mf, outline = ml )\n  \n\n})\nsetMethodS3(\"interactiveBalloonStyle\", \"RKmlFolder\", function(this, id,  ...) {\n  \n  ret = \"\"\n  tmp = this\n  \n  while(!is.null(tmp$.parent)) tmp = tmp$.parent\n\n  mx = readline(\"   Please type in the text you would like to be displayed in the balloon \\n  (See developers.google.com/kml/documentation/kmlreference#balloonstyle\\n  for custom text based on placemark variables): \")\n  mc = readline(\"   What color would you like the pop-up's background to be? \")\n  mt = readline(\"   What color would you like the pop-up's text to be?  \")\n  ml = readline(\"   Would you like the balloon to be displayed when clicked (Y or N)? \")\n    \n  if(ml == \"Y\") ml = \"display\"\n  else ml = \"hide\"\n  \n  tmp$addBalloonStyle(styleid = id, bgColor = mc, textColor = mt, text = mx, displayMode = ml)\n  \n\n \n})\nsetMethodS3(\"interactiveIconStyle\", \"RKmlFolder\", function(this, id,  ...) {\n    \n  ret = \"\"\n  tmp = this\n  \n  while(!is.null(tmp$.parent)) tmp = tmp$.parent\n  mfx = \"\"\n  mfxv = \"\"\n  mfy = \"\"\n  mfyv = \"\"\n  mi = \"\"\n  \n  while(mi == \"\"){  \n  mi = trim(readline(\"   Type the url or uri for the image (exa. www.myicons/icon1.png  or C://icons/icon1.png ): \"))\n  if(mi == \"\") print(\"You must enter a url or uri\")\n  }\n  \n  \n  ms = readline(\"   What scale would you like the label to be (default is 1.0)? \")\n  mh = readline(\"   Please type in a heading for the icon (0 - 360  default is 0): \")\n  mf = readline(\"   Would you like to specify where the icon will be anchored in relation to the placemarks position (Y or N)? \")\n \n  mc = readline(\"   Type a color to blend with the icon or hit enter for no blending: \")\n  if(mc != \"\"){\n  colmod = readline(\"   Would you like to change the color mode to random(random based on color, use white for true random) (Y or N)? \")\n  if(colmod == \"Y\") colmod = \"random\"\n  else colmod = \"normal\"\n  }\n  else colmod = NULL\n\n  if(mf == \"Y\"){\n    mfx = readline(\"      Type units for x values (pixels, fraction or insetpixels: \")\n    if(mfx == \"fraction\") adder = \"(0.0 - 1.0)\"\n    else adder = \"(1 - image's x resolution)\"\n    mfxv = readline(paste(\"      Type x value\",adder, \": \", sep = \"\"))\n    \n    mfy = readline(\"      Type units for y values (pixels, fraction or insetpixels: \")\n    if(mfy == \"fraction\") adder = \"(0.0 - 1.0)\"\n    else adder = \"(1 - image's y resolution)\"\n    mfyv = readline(paste(\"      Type y value\",adder, \": \", sep = \"\"))\n  } \n  else{\n    mfx = \"fraction\"\n    mfxv = .5\n    mfy = \"fraction\"\n    mfyv = .5\n  } \n  \n  \n  tmp$addIconStyle(styleid = id, href = mi, color = mc, scale = ms, heading = mh, xunits = mfx, yunits = mfy, x = mfxv, y = mfyv, colorMode = colmod)\n  \n  \n})\nsetMethodS3(\"interactiveLineStyle\", \"RKmlFolder\", function(this, id, ...) {\n  \n  \n  ret = \"\"\n  tmp = this\n  \n  while(!is.null(tmp$.parent)) tmp = tmp$.parent\n  mc = NULL\n  mt = NULL\n  mw = NULL\n  \n  ow = NULL\n  oc = NULL\n  ot = NULL\n  op = NULL\n  \n  mv = NULL\n  \n  ml = readline(\"   Would you like the line to have a single color line (S) or a line with an inner and an outer color (M)? (S or M)? \")\n  if(ml == \"S\"){\n    mc = readline(\"   What color would you like the line to be? \")\n    mt = readline(\"   What transparency would you like the line to be (0.0 - 1.0)? \")\n    mw = readline(\"   How wide(pixels) would you like the line to be (default is 1.0)? \")\n    \n  }\n  else{\n    mc = readline(\"   What color would you like the inner line to be? \")\n    mt = readline(\"   What transparency would you like the inner line to be (0.0 - 1.0)? \")\n    oc = readline(\"   What color would you like the outer ine to be? \")\n    ot = readline(\"   What transparency would you like the outer line to be (0.0 - 1.0)? \")\n    mw = readline(\"   How wide(meters) would you like the total width to be? \")\n    op = readline(\"   What portion of the total width will be colored with the outer color (0.0 - 1.0)? \")\n  }\n  \n  \n  \n  colmod = readline(\"   Would you like to change the color mode to random(random based on color, use white for true random) (Y or N)? \")\n  if(colmod == \"Y\") colmod = \"random\"\n  else colmod = \"normal\"\n  \n  lv = readline(\"   Would you like the line to be labeled with value of the name variable (Y or N)? \")\n  if(lv == \"Y\") lv = \"1\"\n  else lv = \"0\"\n  \n  \n  tmp$addLineStyle(styleid = id, color = mc, transparency = mt, width = mw, outerColor = oc, outerTransparency = ot, outerPortion = op, colorMode = colmod, labelVisibility = lv)\n  \n\n})\nsetMethodS3(\"addIconStyle\", \"RKmlFolder\", function(this, styleid = NULL, href = NULL, color = \"\", transparency = NULL, scale = 1, heading = 0, xunits = \"fraction\", yunits = \"fraction\", x = .5, y = .5, colorMode = \"normal\", ...) {\n  if(is.null(styleid)) throw(\"You must define the styleid argument.\")\n  lstyle =  c(\"<IconStyle>\"                                                                        \n,\"<color>..rep..</color>\"                                                             \n,\"<colorMode>..rep..</colorMode>\"                                                     \n,\"<scale>..rep..</scale>\"                                                             \n,\"<heading>..rep..</heading>\"                                                         \n,\"<Icon><href>..rep..</href></Icon>\"                                                  \n,\"<hotSpot x=\\\"..repx..\\\"  y=\\\"..repy..\\\" xunits=\\\"..repxu..\\\" yunits=\\\"..repyu..\\\"/>\"\n,\"</IconStyle>\" )\n\n  color = color2kmlcolor(color = color, transparency = transparency)\n  \n    \n  ind = grep(\"<color>\", lstyle)\n  if(!is.null(color)){\n    lstyle[ind] = gsub(\"..rep..\", color, lstyle[ind])\n  }\n  else lstyle = lstyle[-ind]\n  \n  \n\n \n  ind = grep(\"colorMode\", lstyle)\n  if(!is.null(colorMode)){\n    if((colorMode != \"normal\" & colorMode != \"random\")) throw(\"colorMode must be either 'normal' or 'random'\")\n    lstyle[ind] = gsub(\"..rep..\", colorMode, lstyle[ind])\n  }\n  else lstyle = lstyle[-ind]\n  ind = grep(\"hotSpot\", lstyle)\n  if(xunits == \"fraction\" & yunits == \"fraction\" & x == .5 &  y == .5){\n    lstyle = lstyle[-ind]  \n  }\n  else{\n    \n    lstyle[ind] = gsub(\"..repxu..\", xunits, lstyle[ind], fixed = T)\n    lstyle[ind] = gsub(\"..repyu..\", yunits, lstyle[ind], fixed = T)\n    lstyle[ind] = gsub(\"..repx..\", x, lstyle[ind], fixed = T)\n    lstyle[ind] = gsub(\"..repy..\", y, lstyle[ind], fixed = T)\n  }\n\n  \n  ind = grep(\"href\", lstyle)\n  if(!is.null(href)){\n    lstyle[ind] = gsub(\"..rep..\", href, lstyle[ind])\n  }\n  else lstyle = lstyle[-ind]\n  \n  \n  ind = grep(\"scale\", lstyle)\n\n  if(!is.null(scale)){\n    lstyle[ind] = gsub(\"..rep..\", scale, lstyle[ind])\n  }\n  else lstyle = lstyle[-ind]\n  \n  \n  ind = grep(\"heading\", lstyle)\n  if(!is.null(heading)){\n    lstyle[ind] = gsub(\"..rep..\", heading, lstyle[ind])\n  }\n  else lstyle = lstyle[-ind]\n  \n  lstyle = paste(lstyle, collapse = \"\")\n  \n  tmp = this\n  while(!is.null(tmp$.parent)) tmp = tmp$.parent\n  if(styleid %in% names(tmp$.styles)){\n    temp = tmp$.styles[[styleid]]\n    if(TRUE %in% grepl(\"IconStyle\", temp))throw(\"The style for this id already contains an IconStyle. Either try again with a new style id or remove current style with mykmlobj$removeStyle(styleid = 'yourid', styletype = 'IconStyle')\")\n    end = temp[length(temp)]\n    temp[length(temp)] = lstyle\n    temp[length(temp) + 1] = end\n    style = temp\n  }\n  else{\n    style = c(\"<Style id='..rep..'>\", \"</Style>\")\n    ind = grep(\"Style id\", style)\n    style[ind] = gsub(\"..rep..\", styleid, style[ind])\n    end = style[length(style)]\n    style[length(style)] = lstyle\n    style[length(style) + 1] = end\n  }          \n  tmp$.styles[[styleid]] = style \n  \n})\nsetMethodS3(\"addPolyStyle\", \"RKmlFolder\", function(this, styleid = NULL, color = \"red\", transparency = NULL, colorMode = NULL, fill = \"1\", outline = \"1\", ...) {\n  if(is.null(styleid)) throw(\"You must define the styleid argument.\")\n  lstyle = c(\"<PolyStyle>\"\n             ,\"<color>..rep..</color>\"\n             ,\"<colorMode>..rep..</colorMode>\"\n             ,\"<fill>..rep..</fill>\"\n             ,\"<outline>..rep..</outline>\"\n             ,\"</PolyStyle>\")\n  color = color2kmlcolor(color = color, transparency = transparency)\n#   tra = as.hexmode(round(as.numeric(transparency)*255))\n#   if(color == \"\")color = NULL\n#   if(!is.null(color)){\n#     if(color %in% colors()){\n#       color = col2rgb(color)\n#       color = as.character(as.hexmode(color))\n#       color = paste(color[3], color[2], color[1], sep=\"\")\n#     }\n#     else if(nrow(color)>2){\n#       color = as.character(as.hexmode(color))\n#       color = paste(color[3], color[2], color[1], sep=\"\")\n#     } \n#     \n#     color = paste(\"#\", tra, color, sep=\"\")\n#   }\n  \n  ind = grep(\"<color>\", lstyle)\n  if(!is.null(color)){\n    lstyle[ind] = gsub(\"..rep..\", color, lstyle[ind])\n  }\n  else lstyle = lstyle[-ind]\n  \n  \n  ind = grep(\"colorMode\", lstyle)\n  if(!is.null(colorMode)){\n    if((colorMode != \"normal\" & colorMode != \"random\")) throw(\"colorMode must be either 'normal' or 'random'\")\n    lstyle[ind] = gsub(\"..rep..\", colorMode, lstyle[ind])\n  }\n  else lstyle = lstyle[-ind]\n  \n  ind = grep(\"fill\", lstyle)\n  if(!is.null(fill)){\n    lstyle[ind] = gsub(\"..rep..\", fill, lstyle[ind])\n  }\n  else lstyle = lstyle[-ind]\n  \n  ind = grep(\"outline\", lstyle)\n  if(!is.null(outline)){\n    lstyle[ind] = gsub(\"..rep..\", outline, lstyle[ind])\n  }\n  else lstyle = lstyle[-ind]\n  \n  lstyle = paste(lstyle, collapse = \"\")\n  \n  tmp = this\n  while(!is.null(tmp$.parent)) tmp = tmp$.parent\n  if(styleid %in% names(tmp$.styles)){\n    temp = tmp$.styles[[styleid]]\n    if(TRUE %in% grepl(\"PolyStyle\", temp))throw(\"The style for this id already contains a PolyStyle. Either try again with a new styleid or remove current style with mykmlobj$removeStyle(styleid = 'yourid', styletype = 'PolyStyle')\")\n    end = temp[length(temp)]\n    temp[length(temp)] = lstyle\n    temp[length(temp) + 1] = end\n    style = temp\n  }\n  else{\n    style = c(\"<Style id='..rep..'>\", \"</Style>\")\n    ind = grep(\"Style id\", style)\n    style[ind] = gsub(\"..rep..\", styleid, style[ind])\n    end = style[length(style)]\n    style[length(style)] = lstyle\n    style[length(style) + 1] = end\n  }          \n  tmp$.styles[[styleid]] = style \n\n})\nsetMethodS3(\"addStyleMap\", \"RKmlFolder\", function(this, id = NULL, idn = NULL, idh = NULL, ...) {\n  tmp = this\n  if(is.null(id))throw(\"You must supply an id argument\")\n  if(is.null(idn))throw(\"You must supply an idn argument\")\n  if(is.null(idh))throw(\"You must supply an idh argument\")\n  while(!is.null(tmp$.parent)) tmp = tmp$.parent\n  stylemap = c(\"<StyleMap id='..rep..'>\"                                       \n               ,\"<Pair><key>normal</key><styleUrl>#..rep..</styleUrl></Pair>\"   \n               ,\"<Pair><key>highlight</key><styleUrl>#..rep..</styleUrl></Pair>\"\n               ,\"</StyleMap>\" )\n  ind = grep(\"StyleMap id\", stylemap)\n  stylemap[ind] = gsub(\"..rep..\", id, stylemap[ind])\n  ind = grep(\"normal\", stylemap)\n  stylemap[ind] = gsub(\"..rep..\", idn, stylemap[ind])\n  ind = grep(\"highlight\", stylemap)\n  stylemap[ind] = gsub(\"..rep..\", idh, stylemap[ind])\n  \n  tmp$.styles[[id]] = stylemap\n})\nsetMethodS3(\"addLabelStyle\", \"RKmlFolder\", function(this, styleid = NULL, color = \"red\", transparency = NULL, colorMode = \"normal\", scale = 1, ...) {\n  if(is.null(styleid)) throw(\"You must define the styleid argument.\")\n  lstyle = c(\"<LabelStyle>\"\n,\"<color>..rep..</color>\"\n,\"<colorMode>..rep..</colorMode>\"\n,\"<scale>..rep..</scale>\"\n,\"</LabelStyle>\")\n\n  color = color2kmlcolor(color = color, transparency = transparency)\n    \n  ind = grep(\"<color>\", lstyle)\n  if(!is.null(color)){\n    lstyle[ind] = gsub(\"..rep..\", color, lstyle[ind])\n  }\n  else lstyle = lstyle[-ind]\n  \n  \n  ind = grep(\"colorMode\", lstyle)\n  if(!is.null(colorMode)){\n    if((colorMode != \"normal\" & colorMode != \"random\")) throw(\"colorMode must be either 'normal' or 'random'\")\n    lstyle[ind] = gsub(\"..rep..\", colorMode, lstyle[ind])\n  }\n  else lstyle = lstyle[-ind]\n  \n  \n  ind = grep(\"scale\", lstyle)\n  if(!is.null(scale)){\n    lstyle[ind] = gsub(\"..rep..\", scale, lstyle[ind])\n  }\n  else lstyle = lstyle[-ind]\n  \n  lstyle = paste(lstyle, collapse = \"\")\n  \n  \n  tmp = this\n  while(!is.null(tmp$.parent)) tmp = tmp$.parent\n  if(styleid %in% names(tmp$.styles)){\n    temp = tmp$.styles[[styleid]]\n    if(TRUE %in% grepl(\"LabelStyle\", temp))throw(\"The style for this id already contains an IconStyle. Either try again with a new style id or remove current style with mykmlobj$removeStyle(styleid = 'yourid', styletype = 'LabelStyle')\")\n    end = temp[length(temp)]\n    temp[length(temp)] = lstyle\n    temp[length(temp) + 1] = end\n    style = temp\n  }\n  else{\n    style = c(\"<Style id='..rep..'>\", \"</Style>\"  )\n    ind = grep(\"Style id\", style)\n    style[ind] = gsub(\"..rep..\", styleid, style[ind])\n    end = style[length(style)]\n    style[length(style)] = lstyle\n    style[length(style) + 1] = end\n  }          \n  tmp$.styles[[styleid]] = style \n  \n})\nsetMethodS3(\"addBalloonStyle\", \"RKmlFolder\", function(this, styleid = NULL, bgColor = \"white\", textColor = \"black\", text = NULL, displayMode = \"display\", ...) {\n\n  if(is.null(styleid)) throw(\"You must define the styleid argument.\")\n  lstyle = c(\"<BalloonStyle>\"\n  ,\"<bgColor>..rep..</bgColor>\"\n  ,\"<textColor>..rep..</textColor>\"\n  ,\"<text>..rep..</text>\"              \n  ,\"<displayMode>..rep..</displayMode>\"\n  ,\"</BalloonStyle>\")    \n\nbgColor = color2kmlcolor(color = bgColor, transparency = NULL)\n\n  \n  ind = grep(\"<bgColor>\", lstyle)\n  if(!is.null(bgColor)){\n    lstyle[ind] = gsub(\"..rep..\", bgColor, lstyle[ind])\n  }\n  else lstyle = lstyle[-ind]\n  \ntextColor = color2kmlcolor(color = textColor, transparency = NULL)\n  \n  \n  ind = grep(\"<textColor>\", lstyle)\n  if(!is.null(textColor)){\n    lstyle[ind] = gsub(\"..rep..\", textColor, lstyle[ind])\n  }\n  else lstyle = lstyle[-ind]\n  \n  ind = grep(\"<text>\", lstyle)\n  if(!is.null(text)){\n    lstyle[ind] = gsub(\"..rep..\", text, lstyle[ind])\n  }\n  else{\n    text = \"<![CDATA[\n      <b><font size='+3'>$[name]</font></b>\n        <br/><br/>\n        <font face='Courier'>$[description]</font>\n        <br/><br/>\n        <!-- insert the to/from hyperlinks -->\n        $[geDirections]\n      ]]>\"\n    lstyle[ind] = gsub(\"..rep..\", text, lstyle[ind])\n  }\n  \n  \n  ind = grep(\"displayMode\", lstyle)\n  if(!is.null(displayMode)){\n    if((displayMode != \"display\" & displayMode != \"hide\")) throw(\"displayMode must be either 'display' or 'hide'\")\n    lstyle[ind] = gsub(\"..rep..\", displayMode, lstyle[ind])\n  }\n  else lstyle = lstyle[-ind]\n  \n  lstyle = paste(lstyle, collapse = \"\")\n  \n  \n  tmp = this\n  while(!is.null(tmp$.parent)) tmp = tmp$.parent\n  if(styleid %in% names(tmp$.styles)){\n    temp = tmp$.styles[[styleid]]\n    if(TRUE %in% grepl(\"BalloonStyle\", temp))throw(\"The style for this id already contains an IconStyle. Either try again with a new style id or remove current style with mykmlobj$removeStyle(styleid = 'yourid', styletype = 'BalloonStyle')\")\n    end = temp[length(temp)]\n    temp[length(temp)] = lstyle\n    temp[length(temp) + 1] = end\n    style = temp\n  }\n  else{\n    style = c(\"<Style id='..rep..'>\", \"</Style>\"  )\n    ind = grep(\"Style id\", style)\n    style[ind] = gsub(\"..rep..\", styleid, style[ind])\n    end = style[length(style)]\n    style[length(style)] = lstyle\n    style[length(style) + 1] = end\n  }          \n  tmp$.styles[[styleid]] = style \n  \n})\nsetMethodS3(\"addLineStyle\", \"RKmlFolder\", function(this, styleid = NULL, color = \"red\", transparency = NULL, width = 1, outerColor = NULL, outerTransparency = NULL, outerPortion = NULL, colorMode = NULL, labelVisibility = 0, ...) {\n  if(is.null(styleid)) throw(\"You must define the styleid argument.\")\n  pwidth = NULL\n  lstyle = c(\"<LineStyle>\"                                     \n  ,\"<color>..rep..</color>\"                          \n  ,\"<colorMode>..rep..</colorMode>\"                  \n  ,\"<width>..rep..</width>\"                          \n  ,\"<gx:outerColor>..rep..</gx:outerColor>\"          \n  ,\"<gx:outerWidth>..rep..</gx:outerWidth>\"          \n  ,\"<gx:physicalWidth>..rep..</gx:physicalWidth>\"    \n  ,\"<gx:labelVisibility>..rep..</gx:labelVisibility>\"\n  ,\"</LineStyle>\") \n  \n  color = color2kmlcolor(color = color, transparency = transparency)\n  ind = grep(\"<color>\", lstyle)\n  if(!is.null(color)){\n    lstyle[ind] = gsub(\"..rep..\", color, lstyle[ind])\n  }\n  else lstyle = lstyle[-ind]\n  \n\n  \n  if(!is.null(outerColor) & !is.null(outerTransparency)){\n    outerColor = color2kmlcolor(color = outerColor, transparency = outerTransparency)\n    pwidth = width\n    width = NULL\n  }\n  else{\n  outerColor = NULL\n  outerPortion = NULL\n  pwidth = NULL    \n  }\n \n  \n  ind = grep(\"outerColor\", lstyle)\n  if(!is.null(outerColor)){\n    lstyle[ind] = gsub(\"..rep..\", outerColor, lstyle[ind])\n  }\n  else lstyle = lstyle[-ind]\n  \n  ind = grep(\"outerWidth\", lstyle)\n  if(!is.null(outerPortion)){\n    lstyle[ind] = gsub(\"..rep..\", outerPortion, lstyle[ind])\n  }\n  else lstyle = lstyle[-ind]\n  \n  ind = grep(\"physicalWidth\", lstyle)\n  if(!is.null(pwidth)){\n    lstyle[ind] = gsub(\"..rep..\", pwidth, lstyle[ind])\n  }\n  else lstyle = lstyle[-ind]\n  \n  ind = grep(\"labelVisibility\", lstyle)\n  if(!is.null(labelVisibility)){\n    lstyle[ind] = gsub(\"..rep..\", labelVisibility, lstyle[ind])\n  }\n  else lstyle = lstyle[-ind]\n  \n  ind = grep(\"colorMode\", lstyle)\n  if(!is.null(colorMode)){\n    if((colorMode != \"normal\" & colorMode != \"random\")) throw(\"colorMode must be either 'normal' or 'random'\")\n    lstyle[ind] = gsub(\"..rep..\", colorMode, lstyle[ind])\n  }\n  else lstyle = lstyle[-ind]\n  \n  \n  ind = grep(\"width\", lstyle)\n  if(!is.null(width)){\n    lstyle[ind] = gsub(\"..rep..\", width, lstyle[ind])\n  }\n  else lstyle = lstyle[-ind]\n\n  \n  lstyle = paste(lstyle, collapse = \"\")\n  \n  tmp = this\n  while(!is.null(tmp$.parent)) tmp = tmp$.parent\n  if(styleid %in% names(tmp$.styles)){\n    temp = tmp$.styles[[styleid]]\n    if(TRUE %in% grepl(\"LineStyle\", temp))throw(\"The style for this id already contains an IconStyle. Either try again with a new style id or remove current style with mykmlobj$removeStyle(styleid = 'yourid', styletype = 'LineStyle')\")\n    end = temp[length(temp)]\n    temp[length(temp)] = lstyle\n    temp[length(temp) + 1] = end\n    style = temp\n  }\n  else{\n    style = c(\"<Style id='..rep..'>\", \"</Style>\")\n    ind = grep(\"Style id\", style)\n    style[ind] = gsub(\"..rep..\", styleid, style[ind])\n    end = style[length(style)]\n    style[length(style)] = lstyle\n    style[length(style) + 1] = end\n  }          \n  tmp$.styles[[styleid]] = style \n  \n})\nsetMethodS3(\"addListStyle\", \"RKmlFolder\", function(this, styleid = NULL, listItemType = \"check\", bgColor = \"white\", ...) {\n  lstyle = c(\"<ListStyle>\"\n             ,\"<listItemType>..rep..</listItemType>\"\n             ,\"<bgColor>..rep..</bgColor>\"\n             ,\"</ListStyle>\") \n  \n  bgColor = color2kmlcolor(color = bgColor, transparency = NULL)\n  ind = grep(\"<bgColor>\", lstyle)\n  if(!is.null(bgColor)){\n    lstyle[ind] = gsub(\"..rep..\", bgColor, lstyle[ind])\n  }\n  else lstyle = lstyle[-ind]\n  \n  ind = grep(\"<listItemType>\", lstyle)\n  if(!is.null(listItemType)){\n    lstyle[ind] = gsub(\"..rep..\", listItemType, lstyle[ind])\n  }\n  else lstyle = lstyle[-ind]\n    \n  lstyle = paste(lstyle, collapse = \"\")\n  \n  tmp = this\n  while(!is.null(tmp$.parent)) tmp = tmp$.parent\n  if(styleid %in% names(tmp$.styles)){\n    temp = tmp$.styles[[styleid]]\n    if(TRUE %in% grepl(\"ListStyle\", temp))throw(\"The style for this id already contains an IconStyle. Either try again with a new style id or remove current style with mykmlobj$removeStyle(styleid = 'yourid', styletype = 'LineStyle')\")\n    end = temp[length(temp)]\n    temp[length(temp)] = lstyle\n    temp[length(temp) + 1] = end\n    style = temp\n  }\n  else{\n    style = c(\"<Style id='..rep..'>\", \"</Style>\")\n    ind = grep(\"Style id\", style)\n    style[ind] = gsub(\"..rep..\", styleid, style[ind])\n    end = style[length(style)]\n    style[length(style)] = lstyle\n    style[length(style) + 1] = end\n  }          \n  tmp$.styles[[styleid]] = style \n  \n})\nsetMethodS3(\"addAbstractView\", \"RKmlFolder\", function(this, viewid = NULL, type = \"camera\", ViewerOptions = NULL, longitude = NULL, latitude = NULL, altitude = NULL, heading = NULL, tilt = NULL, range = NULL, L, roll = NULL, TimeStamp = NULL, TimeSpanStart = NULL, TimeSpanEnd = NULL, altitudeMode = NULL, ...) {\n  if(is.null(altitudeMode)){  \n    if(!is.null(altitude)) altitudeMode = \"relativeToGround\"\n    else altitude = 0\n  }\n  style = \"\"\n  if(type == \"camera\")style = c(\"<Camera id='..rep..'>\"                                          \n  ,\"<TimeStamp><when>..rep..</when></TimeStamp>\"                    \n  ,\"<TimeSpan><begin>..repa..</begin><end>..repb..</end></TimeSpan>\"\n  ,\"<gx:ViewerOptions>..rep..</gx:ViewerOptions>\"                   \n  ,\"<longitude>..rep..</longitude>\"                                 \n  ,\"<latitude>..rep..</latitude>\"                                   \n  ,\"<altitude>..rep..</altitude>\"                                   \n  ,\"<heading>..rep..</heading>\"                                     \n  ,\"<tilt>..rep..</tilt>\"                                           \n  ,\"<roll>..rep..</roll>\"                                           \n  ,\"<altitudeMode>clampToGround</altitudeMode>\"                     \n  ,\"</Camera>\")     \n  else if(type == \"lookat\") style = c(\"<LookAt id='..rep..'>\"                                          \n                                      ,\"<TimeStamp><when>..rep..</when></TimeStamp>\"                    \n                                      ,\"<TimeSpan><begin>..repa..</begin><end>..repb..</end></TimeSpan>\"\n                                      ,\"<gx:ViewerOptions>..rep..</gx:ViewerOptions>\"                   \n                                      ,\"<longitude>..rep..</longitude>\"                                 \n                                      ,\"<latitude>..rep..</latitude>\"                                   \n                                      ,\"<altitude>..rep..</altitude>\"                                   \n                                      ,\"<heading>..rep..</heading>\"                                     \n                                      ,\"<tilt>..rep..</tilt>\"                                           \n                                      ,\"<range>..rep..</range>\"                                         \n                                      ,\"<altitudeMode>clampToGround</altitudeMode>\"                     \n                                      ,\"</LookAt>\"  )\n  else throw(\"You must choose either 'lookat' or 'camera' for the type\")\n  \n  if(is.null(viewid)) throw(\"You must supply a viewid\")\n  \n  ind = grep(\"ViewerOptions\", style)\n  if(!is.null(ViewerOptions)){\n \n    reptxt = \"\"\n    if(\"streetview\" %in% ViewerOptions) reptxt = paste(reptxt, \"<gx:option name= 'streetview' enabled = T />\", sep =\"\")\n    if(\"historicalimagery\" %in% ViewerOptions) reptxt = paste(reptxt, \"<gx:option name= 'historicalimagery' enabled = T />\", sep=\"\")\n    if(\"sunlight\" %in% ViewerOptions) reptxt = paste(reptxt, \"<gx:option name= 'sunlight' enabled = T />\", sep=\"\")\n    style[ind] = gsub(\"..rep..\", reptxt, style[ind])\n  }\n  else style = style[-ind]\n  \n  ind = grep(\"longitude\", style)\n  if(!is.null(longitude)){\n    style[ind] = gsub(\"..rep..\", longitude, style[ind])\n  }\n  else style = style[-ind]\n  \n  ind = grep(\"latitude\", style)\n  if(!is.null(latitude)){\n    style[ind] = gsub(\"..rep..\", latitude, style[ind])\n  }\n  else style = style[-ind]  \n  \n  ind = grep(\"altitude\", style)\n  if(!is.null(altitude)){\n    style[ind] = gsub(\"..rep..\", altitude, style[ind])\n  }\n  else if(length(ind) >0)style = style[-ind]  \n  \n  ind = grep(\"heading\", style)\n  if(!is.null(heading)){\n    style[ind] = gsub(\"..rep..\", heading, style[ind])\n  }\n  else if(length(ind) >0)style = style[-ind]\n  \n  ind = grep(\"tilt\", style)\n  if(!is.null(tilt)){\n    style[ind] = gsub(\"..rep..\", tilt, style[ind])\n  }\n  else if(length(ind) >0)style = style[-ind]  \n  \n\n\n  ind = grep(\"range\", style)\n  if(!is.null(range)){\n    style[ind] = gsub(\"..rep..\", range, style[ind])\n  }\n  else if(length(ind) >0)style = style[-ind]\n  \n\n\n  ind = grep(\"roll\", style)\n\n  if(!is.null(roll)){\n    style[ind] = gsub(\"..rep..\", roll, style[ind])\n  }\n  else if(length(ind) >0)style = style[-ind]\n  \n  \n  #TODO Add time format check!\n  ind = grep(\"TimeStamp\", style)\n  if(!is.null(TimeStamp)) style[ind] = gsub(\"..rep..\", TimeStamp, style[ind])\n  else style = style[-ind]\n  \n  \n  #TODO Add time format check!\n  ind = grep(\"TimeSpan\", style)\n  if(!(is.null(TimeSpanStart) & is.null(TimeSpanEnd))){\n    if(!is.null(TimeSpanStart)) style[ind] = gsub(\"..repa..\", TimeStamp, style[ind])\n    else gsub(\"<begin>..repa..</begin>\", \"\", style[ind])\n    if(!is.null(TimeSpanEnd)) style[ind] = gsub(\"..repb..\", TimeStamp, style[ind])\n    else gsub(\"<end>..repb..</end>\", \"\", style[ind])\n  }\n  else style = style[-ind]\n  \n  \n  if(!is.null(altitudeMode)){\n    if(!altitudeMode %in% c(\"clampToGround\", \"relativeToGround\", \"absolute\", \"clampToSeaFloor\", \"relativeToSeaFloor\"))\n      throw(\"altitudeMode must be one of the following: clampToGround, relativeToGround, absolute, clampToSeaFloor, relativeToSeaFloor\")\n    ind = grep(\"altitudeMode\", style)\n    if(altitudeMode == \"clampToSeaFloor\" || altitudeMode == \"relativeToSeaFloor\"){\n      style[ind] = gsub(\"altitudeMode\", \"gx:altitudeMode\", style[ind])\n    }\n    style[ind] = gsub(\"clampToGround\", altitudeMode, style[ind])\n  }\n  tmp = this\n  while(!is.null(tmp$.parent)) tmp = tmp$.parent\n  ind = grep(\"id=\", style)\n  style[ind] = gsub(\"..rep..\", as.character(viewid), style[ind])\n  tmp$.Aviewlist[[viewid]] = style \n  \n  })\nsetMethodS3(\"addPoint\", \"RKmlFolder\", function(this, x, ...) {\n  args = list(...)\n\n  tryCatch({\n    x = data.frame(x)\n  }, error = function() {\n    warning(\"Could not coerce x into dataframe.\")\n  })\n  \n  \n  \n  if(is.null(x$lat) || is.null(x$lon)) throw(\"Data Frame x must contain columns lat and lon\")\n  if(is.factor(x$lat) || is.factor(x$lon)){ x$lat = as.character(x$lat); x$lon = as.character(x$lon);}\n  if(length(which(is.na(as.numeric(x$lat)))) > 0  || length(which(is.na(as.numeric(x$lon)))) > 0 ) \n    throw(\"There is a error in lat, lon data. Conversion to numeric failed. Make sure data is in decimal degrees without letters (exa. 45.66666667) \")\n  if(length(which(as.numeric(x$lat) > 360 || as.numeric(x$lat) < -360 || as.numeric(x$lon) < -360 || as.numeric(x$lon) > 360)) > 0) \n    throw(\"There is a error in lat, lon data. Data out of range of expected values (-360, 360). Make sure data is in decimal degrees(exa. 45.66666667) \")\n  x$lat = as.numeric(x$lat)\n  x$lon = as.numeric(x$lon)\n  tryCatch({\n    x = data.frame(x)\n  }, error = function() {\n    warning(\"Could not coerce x into dataframe.\")\n  })\n  \n\n  \n  \n  #Get Frame for kml point\n  mpoints = c( \"<Placemark id='..rep..'>\"                                       \n               ,\"<name>..rep..</name>\"                                           \n               ,\"<visibility>1</visibility>\"                                     \n               ,\"<open>0</open>\"                                                 \n               ,\"<atom:author><atom:name>..rep..</atom:name></atom:author>\"      \n               ,\"<atom:link href='..rep..'/>\"                                    \n               ,\"<address>..rep..</address>\"                                     \n               ,\"<xal:AddressDetails>..rep..</xal:AddressDetails>\"               \n               ,\"<phoneNumber>..rep..</phoneNumber>\"                             \n               ,\"<Snippet maxLines='2'>..rep..</Snippet>\"                        \n               ,\"<description>..rep..</description>\"                             \n               ,\"<AbstractView>#..rep..</AbstractView>\"                          \n               ,\"<TimeStamp><when>..rep..</when></TimeStamp>\"                    \n               ,\"<TimeSpan><begin>..repa..</begin><end>..repb..</end></TimeSpan>\"\n               ,\"<styleUrl>#..rep..</styleUrl>\"                                  \n               ,\"<Region>..rep..</Region>\"                                       \n               ,\"<ExtendedData>..rep..</ExtendedData>\"                           \n               ,\"<Point>\"                                                        \n               ,\"<extrude>..rep..</extrude>\"                                     \n               ,\"<altitudeMode>clampToGround</altitudeMode>\"                     \n               ,\"<coordinates>..rep..</coordinates>\"                             \n               ,\"</Point>\"                                                       \n               ,\"</Placemark>\")\n   for(i in 1:nrow(x)){\n  \n  #Variable list\n  lat = 0\n  lon = 0\n  altitude = NULL                    # meters above/below altiudeMode, clamp altitudeModes ignores altitude\n  extrude = NULL                  # boolean (0 or 1) draw line from point to altitudeMode setting\n  altitudeMode = NULL  # one of \"clampToGround\", \"relativeToGround\", \"absolute\", \"clampToSeaFloor\", \"relativeToSeaFloor\" \n  coordinates = NULL              # Taken from x, Must be in LL WGS84  <!-- lon,lat[,alt] -->\n  name = NULL                     # string\n  visibility = 1                  # boolean (0-invisible or 1-visible)\n  open = 0                        # boolean (0-closed or 1-open  in kml object tree)\n  atomauthor = NULL  \t\t          # xmlns:atom \n  atomlinkhref = NULL             # xmlns:atom\n  address = NULL                  # string\n  xalAddressDetails = NULL        # xmlns:xal\n  phoneNumber = NULL              # string\n  Snippet = NULL                  # string with lines seperated by \\n for nice format exa. \"Hello World\\nThis is my\\nPlace \n  description = NULL              # string that may contain CDATA. See CDATA section for more info\n  AbstractView = NULL             # string id (CameraID or LookAtID) must add with createCamera(id, ...) or createLookAt(id, ...)\n  TimeStamp = NULL                # string of date-time in one of the following formats: (YYYY)(YYYY-MM)(YYYY-MM-DD)(YYYY-MM-DDThh:mm:ssZ)(YYYY-MM-DDThh:mm:ss)\n  TimeSpanStart = NULL            # string of date-time in one of the following formats(overides TimeStamp): (YYYY)(YYYY-MM)(YYYY-MM-DD)(YYYY-MM-DDThh:mm:ssZ)(YYYY-MM-DDThh:mm:ss)\n  TimeSpanEnd = NULL              # string of date-time in one of the following formats(overides TimeStamp): (YYYY)(YYYY-MM)(YYYY-MM-DD)(YYYY-MM-DDThh:mm:ssZ)(YYYY-MM-DDThh:mm:ss)  \n  styleUrl = NULL                 # string id (StyleID) must add with createStyle(id, ...)\n  id = NULL                       # Point ID\n  Region = NULL                   # Currently not supported\n  ExtendedData = NULL             # Currently not supported\n  \n  ##ADDED ABILITY 2015(EXPERIMENTAL) \n  #allow style referenes in dataframe. May remove as using this is bad xml practice \n  \n  \n  icon_color = NULL\n  icon_href = NULL\n  icon_transparency = NULL\n  icon_scale = NULL\n  icon_heading = NULL\n  icon_xunits = NULL \n  icon_x = NULL\n  icon_yunits = NULL\t\n  icon_y = NULL\t\n  icon_colorMode = NULL\t\n  \n  bal_bgColor = NULL  \n  bal_textColor = NULL\t\n  bal_text = NULL\t\n  bal_displayMode = NULL\n  \n  label_color = NULL  \n  label_transparency = NULL\t\n  label_colorMode = NULL\t\n  label_scale = NULL\t\n  \n  line_color = NULL  \n  line_transparency = NULL\t\n  line_width = NULL\t\n  line_outerColor = NULL\t\n  line_outerTransparency = NULL\t\n  line_outerPortion = NULL\t\n  line_colorMode = NULL\t\n  line_labelVisibility = NULL\t\n  \n  #allow folder references\n  inFolder = NULL\n  \n  #Assign values to variables\n\n \n    \n    points = mpoints\n      if(length(args)>0){\n      for(j in 1:length(args)){\n        assign(names(args[j]), args[[j]][1]) \n      }\n    }\n   \n    for(j in 1:length(x)){\n      assign(names(x[j]), x[[names(x)[j]]][i] )\n    }\n  \n  \n  if(is.null(altitudeMode)){  \n  if(!is.null(altitude)) altitudeMode = \"relativeToGround\"\n  else altitude = 0\n  }\n  if(!is.null(altitude)){\n    if(is.na(as.numeric(altitude))) throw(\"altitude must be numeric or able to coerce to numeric \")\n    altitude = as.numeric(altitude)\n  }\n\n  mxalt = F\n  \n  if(is.null(x$altitude)){\n    \n    if(!is.null(altitude)){\n      altitude = altitude[modmod(i, length(altitude))] \n      if(is.na(as.numeric(as.character(altitude)))) throw(\"altitude must be numeric or able to coerce to numeric \")\n      altitude = as.numeric(as.character(altitude))\n    }\n  }\n  else mxalt = T\n  \n  \n  \n  \n  ind = grep(\"extrude\", points)\n  if(!is.null(extrude)){\n    extrude = as.numeric(as.character(extrude))\n    if(! (extrude==0 | extrude==1)) throw(\"extrude must be either 0 or 1 (boolean)\")\n\n    points[ind] = gsub(\"..rep..\", extrude, points[ind])\n  }\n  else points = points[-ind]\n\n\n  if(!is.null(altitudeMode)){\n    if(!altitudeMode %in% c(\"clampToGround\", \"relativeToGround\", \"absolute\", \"clampToSeaFloor\", \"relativeToSeaFloor\"))\n      throw(\"altitudeMode must be one of the following: clampToGround, relativeToGround, absolute, clampToSeaFloor, relativeToSeaFloor\")\n    ind = grep(\"altitudeMode\", points)\n    if(altitudeMode == \"clampToSeaFloor\" || altitudeMode == \"relativeToSeaFloor\"){\n      points[ind] = gsub(\"altitudeMode\", \"gx:altitudeMode\", points[ind])\n    }\n      points[ind] = gsub(\"clampToGround\", altitudeMode, points[ind])\n  }\n\n  ind = grep(\"<name>\", points)\n  if(!is.null(name)) points[ind] = gsub(\"..rep..\", name, points[ind])\n  else points = points[-ind]\n\n  \n    if(!is.null(visibility)){\n      visibility = as.numeric(as.character(visibility))\n      if(! (visibility==0 | visibility==1)) throw(\"visibility must be either 0 or 1 (boolean)\")\n      ind = grep(\"visibility\", points)\n      points[ind] = gsub(\"1\", visibility, points[ind])\n    }\n  \n\n    if(!is.null(open)){\n      open = as.numeric(as.character(open))\n      if(! (open==0 | open==1)) throw(\"open must be either 0 or 1 (boolean)\")\n      ind = grep(\"open\", points)\n      points[ind] = gsub(\"0\", open, points[ind])\n    }\n\n    ind = grep(\"atom:author\", points)\n    if(!is.null(atomauthor)) points[ind] = gsub(\"..rep..\", atomauthor, points[ind])\n    else points = points[-ind]\n   \n    ind = grep(\"atom:link\", points)\n    if(!is.null(atomlinkhref)) points[ind] = gsub(\"..rep..\", atomlinkhref, points[ind])\n    else points = points[-ind]\n    \n    ind = grep(\"xal:AddressDetails\", points)\n    if(!is.null(xalAddressDetails)) points[ind] = gsub(\"..rep..\", xalAddressDetails, points[ind])\n    else points = points[-ind]\n\n    ind = grep(\"address\", points)\n    if(!is.null(address)) points[ind] = gsub(\"..rep..\", address, points[ind])\n    else points = points[-ind]\n    \n    ind = grep(\"phoneNumber\", points)\n    if(!is.null(phoneNumber)) points[ind] = gsub(\"..rep..\", phoneNumber, points[ind])\n    else points = points[-ind]\n\n   \n     ind = grep(\"Snippet\", points)\n     if(!is.null(Snippet)){\n      Snippet = as.character(Snippet)\n      maxlines = length(unlist(strsplit(Snippet, \"\\n\")))\n      points[ind] = gsub(\"2\", maxlines, points[ind])\n      points[ind] = gsub(\"..rep..\", Snippet, points[ind])\n    }\n    else points = points[-ind]\n    \n\n    ind = grep(\"description\", points)\n    if(!is.null(description)) points[ind] = gsub(\"..rep..\", description, points[ind])\n    else points = points[-ind]\n\n \n    ind = grep(\"AbstractView\", points)\n    if(!is.null(AbstractView)){\n      tmp = this\n      while(!is.null(tmp$.parent)) tmp = tmp$.parent\n      if(!AbstractView %in% names(tmp$.Aviewlist))warning(paste(\"No Abstractview id found for '\", AbstractView, \"'. You must create an abstractview with yourkmlobj$addAbstractView(id = '\", AbstractView,\"').\", sep = \"\"))\n      reptxt = tmp$.Aviewlist[[AbstractView]]\n      points[ind] = paste(reptxt, collapse = \"\")\n    }\n    else points = points[-ind]\n\n  \n    #TODO Add time format check!\n    ind = grep(\"TimeStamp\", points)\n    if(!is.null(TimeStamp)) points[ind] = gsub(\"..rep..\", TimeStamp, points[ind])\n    else points = points[-ind]\n\n    \n    #TODO Add time format check!\n    ind = grep(\"TimeSpan\", points)\n    if(!(is.null(TimeSpanStart) & is.null(TimeSpanEnd))){\n      if(!is.null(TimeSpanStart)) points[ind] = gsub(\"..repa..\", TimeStamp, points[ind])\n      else gsub(\"<begin>..repa..</begin>\", \"\", points[ind])\n      if(!is.null(TimeSpanEnd)) points[ind] = gsub(\"..repb..\", TimeStamp, points[ind])\n      else gsub(\"<end>..repb..</end>\", \"\", points[ind])\n    }\n    else points = points[-ind]\n\n###ADDED ABBILITY 2015. \n#some styles in dataframe \nis = F\nbs = F\nls = F\nlis = F\n\nif(!(is.null(icon_color) & is.null(icon_href) & is.null(icon_transparency) & is.null(icon_scale) & \n    is.null(icon_heading) & is.null(icon_xunits) & is.null(icon_x) & is.null(icon_yunits) & is.null(icon_y) & is.null(icon_colorMode)))\n  is = T\nif(!(is.null(bal_bgColor) & is.null(bal_textColor) & is.null(bal_text) & is.null(bal_displayMode)))\n  bs = T\nif(!(is.null(label_color) & is.null(label_transparency) & is.null(label_colorMode) & is.null(label_scale)))\n  ls = T\nif(!(is.null(line_color) & is.null(line_transparency) & is.null(line_width) & is.null(line_outerColor) & \n       is.null(line_outerTransparency) & is.null(line_outerPortion) & is.null(line_colorMode) & is.null(line_labelVisibility)))\n  lis = T\n\n  \n  if(is | ls | bs | lis){\n         if(is.null(styleUrl)){\n         \n           tmp = this\n           while(!is.null(tmp$.parent)) tmp = tmp$.parent\n        \n           sid = paste(\"unnamed_style_\", length(tmp$.styles[which(grepl(\"unnamed_style\", names(tmp$.styles)))]), sep = \"\")\n           \n           if(is){\n           if(is.null(icon_color)) icon_color = \"\"\n           if(is.null(icon_transparency)) icon_transparency = NULL\n           if(is.null(icon_scale))icon_scale = 1\n           if(is.null(icon_heading))icon_heading = 0\n           if(is.null(icon_xunits))icon_xunits = \"fraction\"\n           if(is.null(icon_yunits))icon_yunits = \"fraction\"\n           if(is.null(icon_x))icon_x = .5\n           if(is.null(icon_y))icon_y = .5\n           if(is.null(icon_colorMode))icon_colorMode = \"normal\"\n           tmp$addIconStyle(styleid = sid, href = icon_href, color = icon_color, transparency = icon_transparency, scale = icon_scale, heading = icon_heading, xunits = icon_xunits, x = icon_x, yunits = icon_yunits, y = icon_y, colorMode = icon_colorMode )\n           }\n           if(bs){\n           if(is.null(bal_bgColor))bal_bgColor = \"white\"\n           if(is.null(bal_textColor))bal_textColor = \"black\"\n           if(is.null(bal_displayMode))bal_displayMode = \"display\"\n           tmp$addBalloonStyle(styleid = sid, bgColor = bal_bgColor, textColor = bal_textColor, text = bal_textColor, displayMode = bal_displayMode)   \n           }\n           if(lis){\n           if(is.null(line_color))line_color = \"red\"\n           if(is.null(line_transparency))line_transparency = NULL\n           if(is.null(line_width))line_width = 1\n           if(is.null(line_labelVisibility))line_labelVisibility = 0\n           tmp$addLineStyle(styleid = sid, color = line_color, transparency = line_transparency, width = line_width, outerColor = line_outerColor, outerTransparency = line_outerTransparency, outerPortion = line_outerPortion, colorMode = line_colorMode, labelVisibility = line_labelVisibility)\n           }\n           if(ls){\n           if(is.null(label_color))icon_color = \"red\"\n           if(is.null(label_transparency))label_transparency = NULL\n           if(is.null(label_colorMode))label_colorMode = \"normal\"\n           if(is.null(label_scale))label_scale = 1   \n           tmp$addLabelStyle(styleid = sid, color = label_color, transparency = label_transparency, colorMode = label_colorMode, scale = label_scale)\n           }\n           \n           styleUrl = sid\n         }\n    \n  }\n#define containing folder   \n\n  if(!is.null(inFolder)){\n\n      ssp = unlist(strsplit(as.character(inFolder), \"/\"))\n      ftmp = this\n      while(!is.null(ftmp$.parent)) ftmp = ftmp$.parent\n      for(k in 1:length(ssp)){\n        if(is.null(ftmp$getFolder(ssp[k])))\n          ftmp$addFolder(ssp[k], name = ssp[k])\n        ftmp = ftmp$getFolder(ssp[k])\n      }\n  \n  }\n    ind = grep(\"styleUrl\", points)\n    if(!is.null(styleUrl)){\n      points[ind] = gsub(\"..rep..\", styleUrl, points[ind])\n      tmp = this\n      while(!is.null(tmp$.parent)) tmp = tmp$.parent\n      if(!styleUrl %in% names(tmp$.styles))warning(paste(\"No style id found for '\", styleUrl, \"'. You must create a style with yourkmlobj$createStyle(id = '\", styleUrl,\"').\", sep = \"\"))\n    }\n    else points = points[-ind]\n\n  \n  if(mxalt) cord = paste(x$lon[i], x$lat[i], x$altitude[i], sep=\",\")\n  else cord = paste(x$lon[i], x$lat[i], altitude, sep=\",\")  \n  \n    ind = grep(\"coordinates\", points)\n    points[ind] = gsub(\"..rep..\", cord, points[ind])\n\n    if(!is.null(id)){\n      ind = grep(\"Placemark\", points)\n      points[ind] = gsub(\"ID\", id, points[ind])\n    }\n    \n    \n    \n    ind = grep(\"Region\", points)\n    if(!is.null(Region)) points[ind] = gsub(\"..rep..\", Region, points[ind])\n    else points = points[-ind]\n    \n    ind = grep(\"ExtendedData\", points)\n    if(!is.null(ExtendedData)) points[ind] = gsub(\"..rep..\", ExtendedData, points[ind])\n    else points = points[-ind]\n    \n    \n    ind = grep(\"Placemark id\", points)\n    if(is.null(id)){\n     \n##ADDED 2015 condition\n      if(is.null(inFolder)){\n        points[ind] = gsub(\"..rep..\", as.character(length(this$.points)+1), points[ind])\n        this$.points[[as.character(length(this$.points)+1)]] = points\n      }\n      else{ \n        points[ind] = gsub(\"..rep..\", as.character(length(ftmp$.points)+1), points[ind])\n        ftmp$.points[[as.character(length(ftmp$.points)+1)]] = points\n      }\n    }\n    else{\n    \n##ADDED 2015 condition\n      if(is.null(inFolder)){\n        points[ind] = gsub(\"..rep..\", as.character(id), points[ind])    \n        this$.points[[as.character(id)]] = points\n      }\n      else{\n        points[ind] = gsub(\"..rep..\", as.character(length(ftmp$.points)+1), points[ind])\n        ftmp$.points[[as.character(id)]] = points\n      }\n    }\n\n       \n  }\n   \n})\nsetMethodS3(\"addPolygon\", \"RKmlFolder\", function(this, x, y = NULL, ...) {\n  args = list(...)\n  \n  tryCatch({\n    x = data.frame(x)\n  }, error = function() {\n    warning(\"Could not coerce x into dataframe.\")\n  })\n\n  if(! is.null(y)){\n  tryCatch({\n    y = data.frame(y)\n  }, error = function() {\n    warning(\"Could not coerce y into dataframe.\")\n  })\n  }\n  \n\n  if(is.null(x$lat) || is.null(x$lon) || is.null(x$pid)) throw(\"Data Frame x must contain columns lat, lon and pid\")\n  if(is.factor(x$lat) || is.factor(x$lon) || is.factor(x$pid)){ x$lat = as.character(x$lat); x$lon = as.character(x$lon); x$pid = as.character(x$pid);}\n  if(length(which(is.na(as.numeric(x$lat)))) > 0  || length(which(is.na(as.numeric(x$lon)))) > 0 ) \n    throw(\"There is a error in lat, lon data. Conversion to numeric failed. Make sure data is in decimal degrees without letters (exa. 45.66666667) \")\n  if(length(which(is.na(as.numeric(x$pid)))) > 0 ) \n    throw(\"There is a error in pid data. Conversion to numeric failed. Make sure the data contains no missing values) \")\n  if(length(which(as.numeric(x$lat) > 360 || as.numeric(x$lat) < -360 || as.numeric(x$lon) < -360 || as.numeric(x$lon) > 360)) > 0) \n    throw(\"There is a error in lat, lon data. Data out of range of expected values (-360, 360). Make sure data is in decimal degrees(exa. 45.66666667) \")\n  x$lat = as.numeric(x$lat)\n  x$lon = as.numeric(x$lon)\n  x$pid = as.numeric(x$pid)\n  \n  \n  lt3 = F\n  p = split(x$pid, x$pid)\n  for(i in 1:length(p)){\n    if(length(p[[i]]) < 3){\n      lt3 = T\n    }\n  }\n  if(lt3) throw(\"There is an error in pid data. Each unique pid must have 3 or more data points) \")\n \n  tryCatch({\n    x = data.frame(x)\n  }, error = function() {\n    warning(\"Could not coerce x into dataframe.\")\n  })\n\n  ##Test if y data frame has been supplied. Y data fram defines inner polygons\n  if(!is.null(y)){\n    if(is.null(y$lat) || is.null(y$lon) || is.null(y$pid)) throw(\"Data Frame y must contain columns lat, lon and pid\")\n    if(is.factor(y$lat) || is.factor(y$lon) || is.factor(y$pid)){ y$lat = as.character(y$lat); y$lon = as.character(y$lon); y$lon = as.character(y$pid);}\n    if(length(which(is.na(as.numeric(y$lat)))) > 0  || length(which(is.na(as.numeric(y$lon)))) > 0 ) \n      throw(\"There is a error in inner lat, lon data. Conversion to numeric failed. Make sure data is in decimal degrees without letters (exa. 45.66666667) \")\n    if(length(which(is.na(as.numeric(y$pid)))) > 0 ) \n      throw(\"There is a error in inner pid data. Conversion to numeric failed. Make sure the data contains no missing values) \")\n    if(length(which(as.numeric(y$lat) > 360 || as.numeric(y$lat) < -360 || as.numeric(y$lon) < -360 || as.numeric(y$lon) > 360)) > 0) \n      throw(\"There is a error in inner lat, lon data. Data out of range of expected values (-360, 360). Make sure data is in decimal degrees(exa. 45.66666667) \")\n    y$lat = as.numeric(y$lat)\n    y$lon = as.numeric(y$lon)\n    y$pid = as.numeric(y$pid)\n    \n    lt3 = F\n    q = split(y$pid, y$pid)\n    for(i in 1:length(q)){\n      if(length(q[[i]]) < 3){\n        lt3 = T\n      }\n    }\n    if(lt3) throw(\"There is an error in inner pid data. Each unique pid must have 3 or more data points) \")\n    \n    tryCatch({\n      y = data.frame(y)\n    }, error = function() {\n      warning(\"Could not coerce y into dataframe.\")\n    })\n    \n    \n    \n  }\n  \n  \n  \n  #Get Frame for kml point\n  ppoints = c( \"<Placemark id='..rep..'>\"                                                                      \n               ,\"<name>..rep..</name>\"                                                                          \n               ,\"<visibility>1</visibility>\"                                                                    \n               ,\"<open>0</open>\"                                                                                \n               ,\"<atom:author><atom:name>..rep..</atom:name></atom:author>\"                                     \n               ,\"<atom:link href='..rep..'/>\"                                                                   \n               ,\"<address>..rep..</address>\"                                                                    \n               ,\"<xal:AddressDetails>..rep..</xal:AddressDetails>\"                                              \n               ,\"<phoneNumber>..rep..</phoneNumber>\"                                                            \n               ,\"<Snippet maxLines='2'>..rep..</Snippet>\"                                                       \n               ,\"<description>..rep..</description>\"                                                            \n               ,\"<AbstractView>#..rep..</AbstractView>\"                                                         \n               ,\"<TimeStamp><when>..rep..</when></TimeStamp>\"                                                   \n               ,\"<TimeSpan><begin>..repa..</begin><end>..repb..</end></TimeSpan>\"                               \n               ,\"<styleUrl>#..rep..</styleUrl>\"                                                                 \n               ,\"<Region>..rep..</Region>\"                                                                      \n               ,\"<ExtendedData>..rep..</ExtendedData>\"                                                          \n               ,\"<Polygon id=\\\"ID\\\">\"                                                                           \n               ,\"<extrude>..rep..</extrude>\"                                                                    \n               ,\"<tessellate>..rep..</tessellate>\"                                                              \n               ,\"<altitudeMode>clampToGround</altitudeMode>\"                                                    \n               ,\"<outerBoundaryIs><LinearRing><coordinates>..rep..</coordinates></LinearRing></outerBoundaryIs>\"\n               ,\"<innerBoundaryIs><LinearRing><coordinates>..rep..</coordinates></LinearRing></innerBoundaryIs>\"\n               ,\"</Polygon>\"                                                                                    \n               ,\"</Placemark>\"    )\n  \n  tx = split(x, x$pid)\n  \n  for(i in 1:length(tx)){\n   points = ppoints\n    mx = data.frame(tx[[i]])\n   \n\n  #Variable list\n  lat = 0\n  lon = 0\n  altitude = NULL                    # meters above/below altiudeMode, clamp altitudeModes ignores altitude\n  tessellate = 0\n  extrude = 1                  # boolean (0 or 1) draw line from point to altitudeMode setting\n  altitudeMode = NULL  # one of \"clampToGround\", \"relativeToGround\", \"absolute\", \"clampToSeaFloor\", \"relativeToSeaFloor\" \n  coordinates = NULL              # Taken from x, Must be in LL WGS84  <!-- lon,lat[,alt] -->\n  name = NULL                     # string\n  visibility = 1                  # boolean (0-invisible or 1-visible)\n  open = 0                        # boolean (0-closed or 1-open  in kml object tree)\n  atomauthor = NULL    \t          # xmlns:atom \n  atomlinkhref = NULL             # xmlns:atom\n  address = NULL                  # string\n  xalAddressDetails = NULL        # xmlns:xal\n  phoneNumber = NULL              # string\n  Snippet = NULL                  # string with lines seperated by \\n for nice format exa. \"Hello World\\nThis is my\\nPlace \n  description = NULL              # string that may contain CDATA. See CDATA section for more info\n  AbstractView = NULL             # string id (CameraID or LookAtID) must add with createCamera(id, ...) or createLookAt(id, ...)\n  TimeStamp = NULL                # string of date-time in one of the following formats: (YYYY)(YYYY-MM)(YYYY-MM-DD)(YYYY-MM-DDThh:mm:ssZ)(YYYY-MM-DDThh:mm:ss)\n  TimeSpanStart = NULL            # string of date-time in one of the following formats(overides TimeStamp): (YYYY)(YYYY-MM)(YYYY-MM-DD)(YYYY-MM-DDThh:mm:ssZ)(YYYY-MM-DDThh:mm:ss)\n  TimeSpanEnd = NULL              # string of date-time in one of the following formats(overides TimeStamp): (YYYY)(YYYY-MM)(YYYY-MM-DD)(YYYY-MM-DDThh:mm:ssZ)(YYYY-MM-DDThh:mm:ss)  \n  styleUrl = NULL                 # string id (StyleID) must add with createStyle(id, ...)\n  id = NULL                       # Point ID\n  Region = NULL                   # Currently not supported\n  ExtendedData = NULL             # Currently not supported\n  innercoordinates = NULL              # Taken from y, Must be in LL WGS84  <!-- lon,lat[,alt] -->\n  \n  \n  ##ADDED ABILITY 2015(EXPERIMENTAL) \n  #allow style referenes in dataframe. May remove as using this is bad xml practice \n  icon_color = NULL\n  icon_href = NULL\n  icon_transparency = NULL\n  icon_scale = NULL\n  icon_heading = NULL\n  icon_xunits = NULL \n  icon_x = NULL\n  icon_yunits = NULL  \n  icon_y = NULL\t\n  icon_colorMode = NULL\t\n  \n  bal_bgColor = NULL  \n  bal_textColor = NULL\t\n  bal_text = NULL\t\n  bal_displayMode = NULL\n  \n  label_color = NULL  \n  label_transparency = NULL\t\n  label_colorMode = NULL\t\n  label_scale = NULL\t\n  \n  line_color = NULL  \n  line_transparency = NULL\t\n  line_width = NULL\t\n  line_outerColor = NULL\t\n  line_outerTransparency = NULL\t\n  line_outerPortion = NULL\t\n  line_colorMode = NULL\t\n  line_labelVisibility = NULL\t\n    \n  #New 2015\n  inFolder = NULL\n\n  #Assign values to variables\n  \n    if(length(args)>0){\n      for(j in 1:length(args)){\n        assign(names(args[j]), args[[j]]) \n      }\n    }\n    \n    for(j in 1:length(mx)){\n      assign(names(mx[j]), mx[[names(mx)[j]]][1] )\n    }\n    \n  \n  if(is.null(altitudeMode)){  \n    if(!is.null(altitude)) altitudeMode = \"relativeToGround\"\n    else altitude = 0\n  }\n  \n\n  \n  mxalt = F\n  \n  if(is.null(mx$altitude)){\n    if(!is.null(altitude)){\n      altitude = altitude[modmod(i, length(altitude))] \n       \n      if(is.na(as.numeric(as.character(altitude)))) throw(\"altitude must be numeric or able to coerce to numeric \")\n      altitude = as.numeric(as.character(altitude))\n    }\n  }\n  else mxalt = T\n  \n  ind = grep(\"extrude\", points)\n  if(!is.null(extrude)){\n    \n     extrude = extrude[modmod(i, length(extrude))] \n     \n    \n    extrude = as.numeric(as.character(extrude))\n    if(! (extrude==0 | extrude==1)) throw(\"extrude must be either 0 or 1 (boolean)\")\n    points[ind] = gsub(\"..rep..\", extrude, points[ind])\n  }\n  else points = points[-ind]\n  \n  ind = grep(\"tessellate\", points)\n  if(!is.null(tessellate)){\n   tessellate = tessellate[modmod(i, length(tessellate))] \n   \n    tessellate = as.numeric(as.character(tessellate))\n    if(! (tessellate==0 | tessellate==1)) throw(\"tessellate must be either 0 or 1 (boolean)\")\n    points[ind] = gsub(\"..rep..\", tessellate, points[ind])\n  }\n  else points = points[-ind]  \n  \n  if(!is.null(altitudeMode)){\n    altitudeMode = altitudeMode[modmod(i, length(altitudeMode))] \n    \n    if(!altitudeMode %in% c(\"clampToGround\", \"relativeToGround\", \"absolute\", \"clampToSeaFloor\", \"relativeToSeaFloor\"))\n      throw(\"altitudeMode must be one of the following: clampToGround, relativeToGround, absolute, clampToSeaFloor, relativeToSeaFloor\")\n    ind = grep(\"altitudeMode\", points)\n    if(altitudeMode == \"clampToSeaFloor\" || altitudeMode == \"relativeToSeaFloor\"){\n      points[ind] = gsub(\"altitudeMode\", \"gx:altitudeMode\", points[ind])\n    }\n    points[ind] = gsub(\"clampToGround\", altitudeMode, points[ind])\n  }\n  \n  ind = grep(\"<name>\", points)\n  if(!is.null(name)){\n    name = name[modmod(i, length(name))] \n    points[ind] = gsub(\"..rep..\", name, points[ind])\n  }\n  else points = points[-ind]\n    \n  if(!is.null(visibility)){\n    visibility = visibility[modmod(i, length(visibility))] \n      \n    visibility = as.numeric(as.character(visibility))\n    if(! (visibility==0 | visibility==1)) throw(\"visibility must be either 0 or 1 (boolean)\")\n    \n    ind = grep(\"visibility\", points)\n    points[ind] = gsub(\"0\", visibility, points[ind])\n  }\n  if(!is.null(open)){\n   open = open[modmod(i, length(open))] \n      \n    open = as.numeric(as.character(open))\n    if(! (open==0 | open==1)) throw(\"open must be either 0 or 1 (boolean)\")\n    \n    ind = grep(\"open\", points)\n    points[ind] = gsub(\"0\", open, points[ind])\n  }\n  \n  ind = grep(\"atom:author\", points)\n  if(!is.null(atomauthor)){\n   atomauthor = atomauthor[modmod(i, length(atomauthor))] \n    \n    points[ind] = gsub(\"..rep..\", atomauthor, points[ind])\n  }\n  else points = points[-ind]\n  \n  ind = grep(\"atom:link\", points)\n  if(!is.null(atomlinkhref)){\n    atomlinkhref = atomlinkhref[modmod(i, length(atomlinkhref))] \n     \n    points[ind] = gsub(\"..rep..\", atomlinkhref, points[ind])\n    \n  }\n  else points = points[-ind]\n  \n  ind = grep(\"xal:AddressDetails\", points)\n  if(!is.null(xalAddressDetails)){\n   xalAddressDetails = xalAddressDetails[modmod(i, length(xalAddressDetails))] \n    points[ind] = gsub(\"..rep..\", xalAddressDetails, points[ind])\n  }\n  else points = points[-ind]\n  \n  ind = grep(\"address\", points)\n  if(!is.null(address)){\n   address = address[modmod(i, length(address))] \n      \n    points[ind] = gsub(\"..rep..\", address, points[ind])\n  }\n  else points = points[-ind]\n  \n  ind = grep(\"phoneNumber\", points)\n  if(!is.null(phoneNumber)){\n    phoneNumber = phoneNumber[modmod(i, length(phoneNumber))] \n     \n    points[ind] = gsub(\"..rep..\", phoneNumber, points[ind])\n  }\n  else points = points[-ind]\n  \n  \n  ind = grep(\"Snippet\", points)\n  if(!is.null(Snippet)){\n    Snippet = Snippet[modmod(i, length(Snippet))] \n     \n    Snippet = as.character(Snippet)\n    maxlines = length(unlist(strsplit(Snippet, \"\\n\")))\n    points[ind] = gsub(\"2\", maxlines, points[ind])\n    points[ind] = gsub(\"..rep..\", Snippet, points[ind])\n  }\n  else points = points[-ind]\n  \n  \n  \n  ind = grep(\"description\", points)\n  if(!is.null(description)){\n    description = description[modmod(i, length(description))] \n      \n    points[ind] = gsub(\"..rep..\", description, points[ind])\n  }\n  else points = points[-ind]\n  \n  \n  \n  ind = grep(\"AbstractView\", points)\n  if(!is.null(AbstractView)){\n    AbstractView = AbstractView[modmod(i, length(AbstractView))] \n     \n\n    tmp = this\n    while(!is.null(tmp$.parent)) tmp = tmp$.parent\n    if(!AbstractView %in% names(tmp$.Aviewlist))warning(paste(\"No Abstractview id found for '\", AbstractView, \"'. You must create an abstractview with yourkmlobj$addAbstractView(id = '\", AbstractView,\"').\", sep = \"\"))\n    reptxt = tmp$.Aviewlist[[AbstractView]]\n    points[ind] = paste(reptxt, collapse = \"\")\n}\n  else points = points[-ind]\n  \n  \n  #TODO Add time format check!\n  ind = grep(\"TimeStamp\", points)\n  if(!is.null(TimeStamp)){\n   TimeStamp = TimeStamp[modmod(i,length(TimeStamp))] \n   \n    points[ind] = gsub(\"..rep..\", TimeStamp, points[ind])\n  }\n  else points = points[-ind]\n  \n  \n  #TODO Add time format check!\n  ind = grep(\"TimeSpan\", points)\n  if(!(is.null(TimeSpanStart) & is.null(TimeSpanEnd))){\n    if(!is.null(TimeSpanStart)){\n     TimeSpanStart = TimeSpanStart[modmod(i,length(TimeSpanStart))] \n        \n      points[ind] = gsub(\"..repa..\", TimeSpanStart, points[ind])\n    }\n    else gsub(\"<begin>..repa..</begin>\", \"\", points[ind])\n    if(!is.null(TimeSpanEnd)){\n     TimeSpanEnd = TimeSpanEnd[modmod(i, length(TimeSpanEnd))] \n       \n      points[ind] = gsub(\"..repb..\", TimeSpanEnd, points[ind])\n    }\n    else gsub(\"<end>..repb..</end>\", \"\", points[ind])\n  }\n  else points = points[-ind]\n  \n  \n#New 2015. define containing folder   \n\nif(!is.null(inFolder)){\n  \n  ssp = unlist(strsplit(as.character(inFolder), \"/\"))\n  ftmp = this\n  while(!is.null(ftmp$.parent)) ftmp = ftmp$.parent\n  for(k in 1:length(ssp)){\n    if(is.null(ftmp$getFolder(ssp[k])))\n      ftmp$addFolder(ssp[k], name = ssp[k])\n    ftmp = ftmp$getFolder(ssp[k])\n  }\n  \n}\n###ADDED ABBILITY 2015. \n#some styles in dataframe \nis = F\nbs = F\nls = F\nlis = F\n\nif(!(is.null(icon_color) & is.null(icon_href) & is.null(icon_transparency) & is.null(icon_scale) & \n       is.null(icon_heading) & is.null(icon_xunits) & is.null(icon_x) & is.null(icon_yunits) & is.null(icon_y) & is.null(icon_colorMode)))\n  is = T\nif(!(is.null(bal_bgColor) & is.null(bal_textColor) & is.null(bal_text) & is.null(bal_displayMode)))\n  bs = T\nif(!(is.null(label_color) & is.null(label_transparency) & is.null(label_colorMode) & is.null(label_scale)))\n  ls = T\nif(!(is.null(line_color) & is.null(line_transparency) & is.null(line_width) & is.null(line_outerColor) & \n       is.null(line_outerTransparency) & is.null(line_outerPortion) & is.null(line_colorMode) & is.null(line_labelVisibility)))\n  lis = T\n\n\nif(is | ls | bs | lis){\n  if(is.null(styleUrl)){\n    \n    tmp = this\n    while(!is.null(tmp$.parent)) tmp = tmp$.parent\n    \n    sid = paste(\"unnamed_style_\", length(tmp$.styles[which(grepl(\"unnamed_style\", names(tmp$.styles)))]), sep = \"\")\n    \n    if(is){\n      if(is.null(icon_color)) icon_color = \"\"\n      if(is.null(icon_transparency)) icon_transparency = NULL\n      if(is.null(icon_scale))icon_scale = 1\n      if(is.null(icon_heading))icon_heading = 0\n      if(is.null(icon_xunits))icon_xunits = \"fraction\"\n      if(is.null(icon_yunits))icon_yunits = \"fraction\"\n      if(is.null(icon_x))icon_x = .5\n      if(is.null(icon_y))icon_y = .5\n      if(is.null(icon_colorMode))icon_colorMode = \"normal\"\n      tmp$addIconStyle(styleid = sid, href = icon_href, color = icon_color, transparency = icon_transparency, scale = icon_scale, heading = icon_heading, xunits = icon_xunits, x = icon_x, yunits = icon_yunits, y = icon_y, colorMode = icon_colorMode )\n    }\n    if(bs){\n      if(is.null(bal_bgColor))bal_bgColor = \"white\"\n      if(is.null(bal_textColor))bal_textColor = \"black\"\n      if(is.null(bal_displayMode))bal_displayMode = \"display\"\n      tmp$addBalloonStyle(styleid = sid, bgColor = bal_bgColor, textColor = bal_textColor, text = bal_textColor, displayMode = bal_displayMode)   \n    }\n    if(lis){\n      if(is.null(line_color))line_color = \"red\"\n      if(is.null(line_transparency))line_transparency = NULL\n      if(is.null(line_width))line_width = 1\n      if(is.null(line_labelVisibility))line_labelVisibility = 0\n      tmp$addLineStyle(styleid = sid, color = line_color, transparency = line_transparency, width = line_width, outerColor = line_outerColor, outerTransparency = line_outerTransparency, outerPortion = line_outerPortion, colorMode = line_colorMode, labelVisibility = line_labelVisibility)\n    }\n    if(ls){\n      if(is.null(label_color))label_color = \"red\"\n      if(is.null(label_transparency))label_transparency = NULL\n      if(is.null(label_colorMode))label_colorMode = \"normal\"\n      if(is.null(label_scale))label_scale = 1   \n      tmp$addLabelStyle(styleid = sid, color = label_color, transparency = label_transparency, colorMode = label_colorMode, scale = label_scale)\n    }\n    \n    styleUrl = sid\n  }\n  \n}\n\n  ind = grep(\"styleUrl\", points)\n  if(!is.null(styleUrl)){\n    styleUrl = styleUrl[modmod(i, length(styleUrl))] \n     \n    points[ind] = gsub(\"..rep..\", styleUrl, points[ind])\n    tmp = this\n    while(!is.null(tmp$.parent)) tmp = tmp$.parent\n    if(!styleUrl %in% names(tmp$.styles))warning(paste(\"No style id found for '\", styleUrl, \"'. You must create a style with yourkmlobj$createStyle(id = '\", styleUrl,\"').\", sep = \"\"))\n  }\n  else points = points[-ind]\n   \n   cord = \"\"\n\n   for(k in  1:nrow(mx)){\n     if(mxalt) cor = paste(mx$lon[k], mx$lat[k], mx$altitude[k], sep=\",\")\n     else cor = paste(mx$lon[k], mx$lat[k], altitude, sep=\",\")\n    cord = paste (cord, cor, sep = \" \")\n  }\nif(mxalt) cor = paste(mx$lon[1], mx$lat[1], mx$altitude[1], sep=\",\")\nelse cor = paste(mx$lon[1], mx$lat[1], altitude, sep=\",\")\n\n   cord = paste (cord, cor, sep = \" \")\n   \n    ind = grep(\"outerBoundaryIs\", points)\n    points[ind] = gsub(\"..rep..\", cord, points[ind])\n    \n   ind = grep(\"innerBoundaryIs\", points)\n   if(!is.null(y)){\n     indic = which(y$pid == mx$pid[1])\n     \n     if(length(indic) > 2){\n          ix = y[indic]\n          incord = \"\"\n            for(k in 1:nrow(ix)){\n              if(\"altitude\" %in% names(ix)) altitude = ix$altitude[k] \n              incor = paste(ix$lon[k], ix$lat[k], altitude, sep=\",\")\n              incord = paste (incord, incor, sep = \" \")\n            }\n          incor = paste(ix$lon[1], ix$lat[1], altitude, sep=\",\")\n          incord = paste (incord, incor, sep = \" \")\n            points[ind] = gsub(\"..rep..\", incord, points[ind])\n          }\n          else{\n            points = points[-ind]\n            if(length(indic > 0))\n              warning(\"Encountered inner boundary with less than 3 data points, check y dataframe.\")\n          }\n   }\n   else points = points[-ind]\n\n          \n                  \n          \n    if(!is.null(id)){\n      ind = grep(\"Placemark\", points)\n      points[ind] = gsub(\"ID\", id, points[ind])\n    }\n    \n    \n  ind = grep(\"Region\", points)\n  if(!is.null(Region)){\n    Region = Region[modmod(i, length(Region))] \n    \n    points[ind] = gsub(\"..rep..\", Region, points[ind])\n  }\n  else points = points[-ind]\n  \n  ind = grep(\"ExtendedData\", points)\n  if(!is.null(ExtendedData)){\n    ExtendedData = ExtendedData[modmod(i, length(ExtendedData))] \n      \n    points[ind] = gsub(\"..rep..\", ExtendedData, points[ind])\n  }\n  else points = points[-ind]\n    \n    \n    ind = grep(\"Placemark id\", points)\n\n\nif(is.null(id)){\n  \n  ##ADDED 2015 condition\n  if(is.null(inFolder)){\n    points[ind] = gsub(\"..rep..\", as.character(length(this$.points)+1), points[ind])\n    this$.points[[as.character(length(this$.points)+1)]] = points\n  }\n  else{ \n    points[ind] = gsub(\"..rep..\", as.character(length(ftmp$.points)+1), points[ind])\n    ftmp$.points[[as.character(length(ftmp$.points)+1)]] = points\n  }\n}\nelse{\n  \n  ##ADDED 2015 condition\n  if(is.null(inFolder)){\n    points[ind] = gsub(\"..rep..\", as.character(id), points[ind])    \n    this$.points[[as.character(id)]] = points\n  }\n  else{\n    points[ind] = gsub(\"..rep..\", as.character(length(ftmp$.points)+1), points[ind])\n    ftmp$.points[[as.character(id)]] = points\n  }\n}\n# \n# if(is.null(id)){\n#       points[ind] = gsub(\"..rep..\", as.character(length(this$.points)+1), points[ind])\n#       this$.points[[as.character(length(this$.points)+1)]] = points\n#     }\n#     else{\n#       points[ind] = gsub(\"..rep..\", as.character(id), points[ind])\n#       this$.points[[as.character(id)]] = points\n#     }\n#     \n    \n  }\n  \n})\nsetMethodS3(\"addLineString\", \"RKmlFolder\", function(this, x, ...) {\n  args = list(...)\n \n  tryCatch({\n    x = data.frame(x)\n  }, error = function() {\n    warning(\"Could not coerce x into dataframe.\")\n  })\n  \n  \n  \n  if(is.null(x$lat) || is.null(x$lon) || is.null(x$pid)) throw(\"Data Frame x must contain columns lat, lon and pid\")\n  if(is.factor(x$lat) || is.factor(x$lon) || is.factor(x$pid)){ x$lat = as.character(x$lat); x$lon = as.character(x$lon); x$pid = as.character(x$pid);}\n  if(length(which(is.na(as.numeric(x$lat)))) > 0  || length(which(is.na(as.numeric(x$lon)))) > 0 ) \n    throw(\"There is a error in lat, lon data. Conversion to numeric failed. Make sure data is in decimal degrees without letters (exa. 45.66666667) \")\n  if(length(which(is.na(as.numeric(x$pid)))) > 0 ) \n    throw(\"There is a error in pid data. Conversion to numeric failed. Make sure the data contains no missing values) \")\n  if(length(which(as.numeric(x$lat) > 360 || as.numeric(x$lat) < -360 || as.numeric(x$lon) < -360 || as.numeric(x$lon) > 360)) > 0) \n    throw(\"There is a error in lat, lon data. Data out of range of expected values (-360, 360). Make sure data is in decimal degrees(exa. 45.66666667) \")\n  x$lat = as.numeric(x$lat)\n  x$lon = as.numeric(x$lon)\n  x$pid = as.numeric(x$pid)\n  \n  \n  lt3 = F\n  p = split(x$pid, x$pid)\n  for(i in 1:length(p)){\n    if(length(p[[i]]) < 2){\n      lt3 = T\n    }\n  }\n  if(lt3) throw(\"There is an error in pid data. Each unique pid must have 2 or more data points) \")\n  \n  tryCatch({\n    x = data.frame(x)\n  }, error = function() {\n    warning(\"Could not coerce x into dataframe.\")\n  })\n  \n  \n  #Get Frame for kml point\n  ppoints = c( \"<Placemark id='..rep..'>\"                                       \n               ,\"<name>..rep..</name>\"                                           \n               ,\"<visibility>1</visibility>\"                                     \n               ,\"<open>0</open>\"                                                 \n               ,\"<atom:author><atom:name>..rep..</atom:name></atom:author>\"      \n               ,\"<atom:link href='..rep..'/>\"                                    \n               ,\"<address>..rep..</address>\"                                     \n               ,\"<xal:AddressDetails>..rep..</xal:AddressDetails>\"               \n               ,\"<phoneNumber>..rep..</phoneNumber>\"                             \n               ,\"<Snippet maxLines='2'>..rep..</Snippet>\"                        \n               ,\"<description>..rep..</description>\"                             \n               ,\"<AbstractView>#..rep..</AbstractView>\"                          \n               ,\"<TimeStamp><when>..rep..</when></TimeStamp>\"                    \n               ,\"<TimeSpan><begin>..repa..</begin><end>..repb..</end></TimeSpan>\"\n               ,\"<styleUrl>#..rep..</styleUrl>\"                                  \n               ,\"<Region>..rep..</Region>\"                                       \n               ,\"<ExtendedData>..rep..</ExtendedData>\"                           \n               ,\"<LineString id=\\\"ID\\\">\"                                         \n               ,\"<extrude>..rep..</extrude>\"                                     \n               ,\"<tessellate>..rep..</tessellate>\"                               \n               ,\"<gx:drawOrder>..rep..</gx:drawOrder>\"                           \n               ,\"<altitudeMode>clampToGround</altitudeMode>\"                     \n               ,\"<coordinates>..rep..</coordinates>\"                             \n               ,\"</LineString>\"                                                  \n               ,\"</Placemark>\" )\n  \n  tx = split(x, x$pid)\n\n  for(i in 1:length(tx)){\n    points = ppoints\n    mx = data.frame(tx[[i]])\n    \n    \n    #Variable list\n    lat = 0\n    lon = 0\n    altitude = NULL                    # meters above/below altiudeMode, clamp altitudeModes ignores altitude\n    extrude = 1                  # boolean (0 or 1) draw line from point to altitudeMode setting\n    tessellate = 1                \n    drawOrder = NULL \n    altitudeMode = NULL  # one of \"clampToGround\", \"relativeToGround\", \"absolute\", \"clampToSeaFloor\", \"relativeToSeaFloor\" \n    coordinates = NULL              # Taken from x, Must be in LL WGS84  <!-- lon,lat[,alt] -->\n    name = NULL                     # string\n    visibility = 1                  # boolean (0-invisible or 1-visible)\n    open = 0                        # boolean (0-closed or 1-open  in kml object tree)\n    atomauthor = NULL                # xmlns:atom \n    atomlinkhref = NULL             # xmlns:atom\n    address = NULL                  # string\n    xalAddressDetails = NULL        # xmlns:xal\n    phoneNumber = NULL              # string\n    Snippet = NULL                  # string with lines seperated by \\n for nice format exa. \"Hello World\\nThis is my\\nPlace \n    description = NULL              # string that may contain CDATA. See CDATA section for more info\n    AbstractView = NULL             # string id (CameraID or LookAtID) must add with createCamera(id, ...) or createLookAt(id, ...)\n    TimeStamp = NULL                # string of date-time in one of the following formats: (YYYY)(YYYY-MM)(YYYY-MM-DD)(YYYY-MM-DDThh:mm:ssZ)(YYYY-MM-DDThh:mm:ss)\n    TimeSpanStart = NULL            # string of date-time in one of the following formats(overides TimeStamp): (YYYY)(YYYY-MM)(YYYY-MM-DD)(YYYY-MM-DDThh:mm:ssZ)(YYYY-MM-DDThh:mm:ss)\n    TimeSpanEnd = NULL              # string of date-time in one of the following formats(overides TimeStamp): (YYYY)(YYYY-MM)(YYYY-MM-DD)(YYYY-MM-DDThh:mm:ssZ)(YYYY-MM-DDThh:mm:ss)  \n    styleUrl = NULL                 # string id (StyleID) must add with createStyle(id, ...)\n    id = NULL                       # Point ID\n    Region = NULL                   # Currently not supported\n    ExtendedData = NULL             # Currently not supported\n    \n    ##ADDED ABILITY 2015(EXPERIMENTAL) \n    #allow style referenes in dataframe. May remove as using this is bad xml practice \n    \n    \n    icon_color = NULL\n    icon_href = NULL\n    icon_transparency = NULL\n    icon_scale = NULL\n    icon_heading = NULL\n    icon_xunits = NULL \n    icon_x = NULL\n    icon_yunits = NULL  \n    icon_y = NULL\t\n    icon_colorMode = NULL\t\n    \n    bal_bgColor = NULL  \n    bal_textColor = NULL\t\n    bal_text = NULL\t\n    bal_displayMode = NULL\n    \n    label_color = NULL  \n    label_transparency = NULL\t\n    label_colorMode = NULL\t\n    label_scale = NULL\t\n    \n    line_color = NULL  \n    line_transparency = NULL\t\n    line_width = NULL\t\n    line_outerColor = NULL\t\n    line_outerTransparency = NULL\t\n    line_outerPortion = NULL\t\n    line_colorMode = NULL\t\n    line_labelVisibility = NULL\t\n    \n    \n    #New 2015\n    inFolder = NULL\n    #Assign values to variables\n    \n    \n    \n    \n    if(length(args)>0){\n      for(j in 1:length(args)){\n        assign(names(args[j]), args[[j]]) \n      }\n    }\n    \n    for(j in 1:length(mx)){\n      assign(names(mx[j]), mx[[names(mx)[j]]] )\n    }\n\n    \n    if(is.null(altitudeMode)){  \n      if(!is.null(altitude)) altitudeMode = \"relativeToGround\"\n      else altitude = 0\n    }\n    \n    \n    mxalt = F\n  \n   if(is.null(mx$altitude)){\n\n    if(!is.null(altitude)){\n   \n      altitude = altitude[modmod(i, length(altitude))] \n      \n      \n      if(is.na(as.numeric(as.character(altitude)))) throw(\"altitude must be numeric or able to coerce to numeric \")\n      altitude = as.numeric(as.character(altitude))\n    }\n   }\n   else mxalt = T\n    \n\n    ind = grep(\"extrude\", points)\n    if(!is.null(extrude)){\n      extrude = extrude[modmod(i, length(extrude))] \n       \n      extrude = as.numeric(as.character(extrude))\n      if(! (extrude==0 | extrude==1)) throw(\"extrude must be either 0 or 1 (boolean)\")\n      points[ind] = gsub(\"..rep..\", extrude, points[ind])\n    }\n    else points = points[-ind]\n    \n    \n    ind = grep(\"tessellate\", points)\n    if(!is.null(tessellate)){\n     tessellate = tessellate[modmod(i, length(tessellate))] \n       \n      tessellate = as.numeric(as.character(tessellate))\n      if(! (tessellate==0 | tessellate==1)) throw(\"tessellate must be either 0 or 1 (boolean)\")\n      points[ind] = gsub(\"..rep..\", tessellate, points[ind])\n    }\n    else points = points[-ind]\n    \n    ind = grep(\"drawOrder\", points)\n    if(!is.null(drawOrder)){\n      drawOrder = drawOrder[modmod(i, length(drawOrder))] \n       \n      drawOrder = as.numeric(as.character(drawOrder))\n      points[ind] = gsub(\"..rep..\", drawOrder, points[ind])\n    }\n    else points = points[-ind]\n    \n    \n    if(!is.null(altitudeMode)){\n      ialtitudeMode = altitudeMode[modmod(i, length(altitudeMode))] \n       \n      if(!altitudeMode %in% c(\"clampToGround\", \"relativeToGround\", \"absolute\", \"clampToSeaFloor\", \"relativeToSeaFloor\"))\n        throw(\"altitudeMode must be one of the following: clampToGround, relativeToGround, absolute, clampToSeaFloor, relativeToSeaFloor\")\n      ind = grep(\"altitudeMode\", points)\n      if(altitudeMode == \"clampToSeaFloor\" || altitudeMode == \"relativeToSeaFloor\"){\n        points[ind] = gsub(\"altitudeMode\", \"gx:altitudeMode\", points[ind])\n      }\n      points[ind] = gsub(\"clampToGround\", altitudeMode, points[ind])\n    }\n    \n    ind = grep(\"<name>\", points)\n    if(!is.null(name)){\n      name = name[modmod(i, length(name))] \n        \n      points[ind] = gsub(\"..rep..\", name, points[ind])\n    }\n    else points = points[-ind]\n    \n    if(!is.null(visibility)){\n      visibility = visibility[modmod(i, length(visibility))] \n       \n      visibility = as.numeric(as.character(visibility))\n      if(! (visibility==0 | visibility==1)) throw(\"visibility must be either 0 or 1 (boolean)\")\n     \n      ind = grep(\"visibility\", points)\n      points[ind] = gsub(\"0\", visibility, points[ind])\n    }\n    if(!is.null(open)){\n      open = open[modmod(i, length(open))] \n       \n      open = as.numeric(as.character(open))\n      if(! (open==0 | open==1)) throw(\"open must be either 0 or 1 (boolean)\")\n      \n      ind = grep(\"open\", points)\n      points[ind] = gsub(\"0\", open, points[ind])\n    }\n    \n    ind = grep(\"atom:author\", points)\n    if(!is.null(atomauthor)){\n      atomauthor = atomauthor[modmod(i, length(atomauthor))] \n       \n      points[ind] = gsub(\"..rep..\", atomauthor, points[ind])\n    }\n    else points = points[-ind]\n    \n    ind = grep(\"atom:link\", points)\n    if(!is.null(atomlinkhref)){\n      atomlinkhref = atomlinkhref[modmod(i, length(atomlinkhref))] \n      \n      points[ind] = gsub(\"..rep..\", atomlinkhref, points[ind])\n    \n    }\n      else points = points[-ind]\n    \n    ind = grep(\"xal:AddressDetails\", points)\n    if(!is.null(xalAddressDetails)){\n     xalAddressDetails = xalAddressDetails[modmod(i, length(xalAddressDetails))] \n     \n      points[ind] = gsub(\"..rep..\", xalAddressDetails, points[ind])\n    }\n      else points = points[-ind]\n    \n    ind = grep(\"address\", points)\n    if(!is.null(address)){\n      if(length(address) > 1){\n        if(i > length(address))address = address[modmod(i, length(address))] \n        else address = address[i]\n      } \n      points[ind] = gsub(\"..rep..\", address, points[ind])\n    }\n      else points = points[-ind]\n    \n    ind = grep(\"phoneNumber\", points)\n    if(!is.null(phoneNumber)){\n     phoneNumber = phoneNumber[modmod(i,length(phoneNumber))] \n      \n      points[ind] = gsub(\"..rep..\", phoneNumber, points[ind])\n    }\n      else points = points[-ind]\n    \n    \n    ind = grep(\"Snippet\", points)\n    if(!is.null(Snippet)){\n     Snippet = Snippet[modmod(i, length(Snippet))] \n      \n      Snippet = as.character(Snippet)\n      maxlines = length(unlist(strsplit(Snippet, \"\\n\")))\n      points[ind] = gsub(\"2\", maxlines, points[ind])\n      points[ind] = gsub(\"..rep..\", Snippet, points[ind])\n    }\n    else points = points[-ind]\n    \n    \n    ind = grep(\"description\", points)\n    if(!is.null(description)){\n     description = description[modmod(i, length(description))] \n      \n      points[ind] = gsub(\"..rep..\", description, points[ind])\n    }\n      else points = points[-ind]\n    \n   \n   ind = grep(\"AbstractView\", points)\n   if(!is.null(AbstractView)){\n     AbstractView = AbstractView[modmod(i, length(AbstractView))] \n     \n     \n     tmp = this\n     while(!is.null(tmp$.parent)) tmp = tmp$.parent\n     if(!AbstractView %in% names(tmp$.Aviewlist))warning(paste(\"No Abstractview id found for '\", AbstractView, \"'. You must create an abstractview with yourkmlobj$addAbstractView(id = '\", AbstractView,\"').\", sep = \"\"))\n     reptxt = tmp$.Aviewlist[[AbstractView]]\n     points[ind] = paste(reptxt, collapse = \"\")\n   }\n   else points = points[-ind]\n   \n    \n    \n    #TODO Add time format check!\n    ind = grep(\"TimeStamp\", points)\n    if(!is.null(TimeStamp)){\n      TimeStamp = TimeStamp[modmod(i, length(TimeStamp))] \n      points[ind] = gsub(\"..rep..\", TimeStamp, points[ind])\n    }\n      else points = points[-ind]\n    \n    \n    #TODO Add time format check!\n    ind = grep(\"TimeSpan\", points)\n    if(!(is.null(TimeSpanStart) & is.null(TimeSpanEnd))){\n      if(!is.null(TimeSpanStart)){\n        TimeSpanStart = TimeSpanStart[modmod(i, length(TimeSpanStart))] \n         \n        points[ind] = gsub(\"..repa..\", TimeSpanStart, points[ind])\n      }\n      else gsub(\"<begin>..repa..</begin>\", \"\", points[ind])\n      if(!is.null(TimeSpanEnd)){\n        TimeSpanEnd = TimeSpanEnd[modmod(i, length(TimeSpanEnd))] \n         \n        points[ind] = gsub(\"..repb..\", TimeSpanEnd, points[ind])\n      }\n        else gsub(\"<end>..repb..</end>\", \"\", points[ind])\n    }\n    else points = points[-ind]\n    \n   ###ADDED ABBILITY 2015. \n   #some styles in dataframe \n   is = F\n   bs = F\n   ls = F\n   lis = F\n   \n   if(!(is.null(icon_color) & is.null(icon_href) & is.null(icon_transparency) & is.null(icon_scale) & \n          is.null(icon_heading) & is.null(icon_xunits) & is.null(icon_x) & is.null(icon_yunits) & is.null(icon_y) & is.null(icon_colorMode)))\n     is = T\n   if(!(is.null(bal_bgColor) & is.null(bal_textColor) & is.null(bal_text) & is.null(bal_displayMode)))\n     bs = T\n   if(!(is.null(label_color) & is.null(label_transparency) & is.null(label_colorMode) & is.null(label_scale)))\n     ls = T\n   if(!(is.null(line_color) & is.null(line_transparency) & is.null(line_width) & is.null(line_outerColor) & \n          is.null(line_outerTransparency) & is.null(line_outerPortion) & is.null(line_colorMode) & is.null(line_labelVisibility)))\n     lis = T\n   \n   \n   if(is | ls | bs | lis){\n     if(is.null(styleUrl)){\n       \n       tmp = this\n       while(!is.null(tmp$.parent)) tmp = tmp$.parent\n       \n       sid = paste(\"unnamed_style_\", length(tmp$.styles[which(grepl(\"unnamed_style\", names(tmp$.styles)))]), sep = \"\")\n     \n       if(is){\n         if(is.null(icon_color)) icon_color = \"\"\n         else{\n           if(is.null(mx$icon_color)){\n             icon_color = icon_color[modmod(i, length(icon_color))]\n           }\n           else icon_color = mx$icon_color[1]\n         }\n         \n         if(is.null(icon_transparency)) icon_transparency = NULL\n         else{\n           if(is.null(mx$icon_transparency)){\n             icon_transparency = icon_transparency[modmod(i, length(icon_transparency))]\n           }\n           else icon_transparency = mx$icon_transparency[1]\n         }\n         \n         if(is.null(icon_scale))icon_scale = 1\n         else{\n           if(is.null(mx$icon_scale)){\n            icon_scale = icon_scale[modmod(i, length(icon_scale))]\n           }\n           else icon_scale = mx$icon_scale[1]\n         }\n         \n         if(is.null(icon_heading))icon_heading = 0\n         else{\n           if(is.null(mx$icon_heading)){\n             icon_heading = icon_heading[modmod(i, length(icon_heading))]\n           }\n           else icon_heading = mx$icon_heading[1]\n         }\n         \n         \n         if(is.null(icon_xunits))icon_xunits = \"fraction\"\n         else{\n           if(is.null(mx$icon_xunits)){\n             icon_xunits = icon_xunits[modmod(i, length(icon_xunits))]\n           }\n           else icon_xunits = mx$icon_xunits[1]\n         }\n         \n         if(is.null(icon_yunits))icon_yunits = \"fraction\"\n         else{\n           if(is.null(mx$icon_yunits)){\n             icon_yunits = icon_yunits[modmod(i, length(icon_yunits))]\n           }\n           else icon_yunits = mx$icon_yunits[1]\n         }\n         \n         if(is.null(icon_x))icon_x = .5\n         else{\n           if(is.null(mx$icon_x)){\n             icon_x = icon_x[modmod(i, length(icon_x))]\n           }\n           else icon_x = mx$icon_x[1]\n         }\n         \n         if(is.null(icon_y))icon_y = .5\n         else{\n           if(is.null(mx$icon_y)){\n             icon_y = icon_y[modmod(i, length(icon_y))]\n           }\n           else icon_y = mx$icon_y[1]\n         }\n         \n         if(is.null(icon_colorMode))icon_colorMode = \"normal\"\n         else{\n           if(is.null(mx$icon_colorMode)){\n             icon_colorMode = icon_colorMode[modmod(i, length(icon_colorMode))]\n           }\n           else icon_colorMode = mx$icon_colorMode[1]\n         }\n         \n         tmp$addIconStyle(styleid = sid, href = icon_href, color = icon_color, transparency = icon_transparency, scale = icon_scale, heading = icon_heading, xunits = icon_xunits, x = icon_x, yunits = icon_yunits, y = icon_y, colorMode = icon_colorMode )\n       }\n       if(bs){\n         if(is.null(bal_bgColor))bal_bgColor = \"white\"\n         else{\n           if(is.null(mx$bal_bgColor)){\n             bal_bgColor = bal_bgColor[modmod(i, length(bal_bgColor))]\n           }\n           else bal_bgColor = mx$bal_bgColor[1]\n         }\n         \n         if(is.null(bal_textColor))bal_textColor = \"black\"\n         else{\n           if(is.null(mx$bal_textColor)){\n             bal_textColor = bal_textColor[modmod(i, length(bal_textColor))]\n           }\n           else bal_textColor = mx$bal_textColor[1]\n         }\n         \n        if(is.null(bal_displayMode))bal_displayMode = \"display\"\n        else{\n          if(is.null(mx$bal_displayMode)){\n           bal_displayMode = bal_displayMode[modmod(i, length(bal_displayMode))]\n          }\n          else bal_displayMode = mx$bal_displayMode[1]\n        }\n        \n          tmp$addBalloonStyle(styleid = sid, bgColor = bal_bgColor, textColor = bal_textColor, text = bal_textColor, displayMode = bal_displayMode)   \n       }\n       if(lis){\n         if(is.null(line_color))line_color = \"red\"\n         else{\n           if(is.null(mx$line_color)){\n            line_color = line_color[modmod(i, length(line_color))]\n           }\n           else line_color = mx$line_color[1]\n         }\n         \n           if(is.null(line_transparency))line_transparency = NULL\n         else{\n           if(is.null(mx$line_transparency)){\n            line_transparency = line_transparency[modmod(i, length(line_transparency))]\n           }\n           else line_transparency = mx$line_transparency[1]\n         }\n         \n           if(is.null(line_width))line_width = 1\n         else{\n           if(is.null(mx$line_width)){\n             line_width = line_width[modmod(i, length(line_width))]\n           }\n           else line_width = mx$line_width[1]\n         }\n         \n           if(is.null(line_labelVisibility))line_labelVisibility = 0\n         else{\n           if(is.null(mx$line_labelVisibility)){\n            line_labelVisibility = line_labelVisibility[modmod(i, length(line_labelVisibility))]\n           }\n           else line_labelVisibility = mx$line_labelVisibility[1]\n         }\n         \n           tmp$addLineStyle(styleid = sid, color = line_color, transparency = line_transparency, width = line_width, outerColor = line_outerColor, outerTransparency = line_outerTransparency, outerPortion = line_outerPortion, colorMode = line_colorMode, labelVisibility = line_labelVisibility)\n       }\n       if(ls){\n         if(is.null(label_color))label_color = \"red\"\n         else{\n           if(is.null(mx$label_color)){\n            label_color = label_color[modmod(i, length(label_color))]\n           }\n           else label_color = mx$label_color[1]\n         }\n         \n           if(is.null(label_transparency))label_transparency = NULL\n         else{\n           if(is.null(mx$label_transparency)){\n            label_transparency = label_transparency[modmod(i, length(label_transparency))]\n           }\n           else label_transparency = mx$label_transparency[1]\n         }\n         \n           if(is.null(label_colorMode))label_colorMode = \"normal\"\n         else{\n           if(is.null(mx$label_colorMode)){\n             label_colorMode = label_colorMode[modmod(i, length(label_colorMode))]\n           }\n           else label_colorMode = mx$label_colorMode[1]\n         }\n         \n           if(is.null(label_scale))scale = 1   \n         else{\n           if(is.null(mx$label_scale)){\n            label_scale = label_scale[modmod(i, length(label_scale))]\n           }\n           else label_scale = mx$label_scale[1]\n         }\n         \n         tmp$addLabelStyle(styleid = sid, color = label_color, transparency = label_transparency, colorMode = label_colorMode, scale = label_scale)\n       }\n       \n       styleUrl = sid\n     }\n     \n   }\n   \n   \n    \n    ind = grep(\"styleUrl\", points)\n    if(!is.null(styleUrl)){\n        \n        if(is.null(mx$styleUrl)){\n          styleUrl = styleUrl[modmod(i, length(styleUrl))]\n        }  \n        else styleUrl = mx$styleUrl[1]\n        \n        \n    \n      \n      points[ind] = gsub(\"..rep..\", styleUrl, points[ind])\n      tmp = this\n      while(!is.null(tmp$.parent)) tmp = tmp$.parent\n      if(!styleUrl %in% names(tmp$.styles))warning(paste(\"No style id found for '\", styleUrl, \"'. You must create a style with yourkmlobj$createStyle(id = '\", styleUrl,\"').\", sep = \"\"))\n    }\n    else points = points[-ind]\n\n    \n    cord = \"\"\n    \n    for(k in  1:nrow(mx)){\n   \n      \n      if(mxalt) cor = paste(mx$lon[k], mx$lat[k], mx$altitude[k], sep=\",\")\n      else cor = paste(mx$lon[k], mx$lat[k], altitude, sep=\",\")\n\n      cord = paste (cord, cor, sep = \" \")\n    }\n\n    \n    ind = grep(\"coordinates\", points)\n    points[ind] = gsub(\"..rep..\",cord, points[ind])\n\n    \n    \n    \n    if(!is.null(id)){\n      ind = grep(\"Placemark\", points)\n      points[ind] = gsub(\"ID\", id, points[ind])\n    }\n    \n    \n    \n    ind = grep(\"Region\", points)\n    if(!is.null(Region)){\n      if(is.null(mx$Region)){\n        Region = Region[modmod(i, length(Region))] \n      }  \n      else Region = mx$Region[1]\n       \n     \n      points[ind] = gsub(\"..rep..\", Region, points[ind])\n    }\n      else points = points[-ind]\n\n    ind = grep(\"ExtendedData\", points)\n    if(!is.null(ExtendedData)){\n      if(is.null(mx$ExtendedData)){\n        ExtendedData = ExtendedData[modmod(i, length(ExtendedData))] \n        \n      }  \n      else ExtendedData = mx$ExtendedData[1]\n      \n      \n      points[ind] = gsub(\"..rep..\", ExtendedData, points[ind])\n    }\n      else points = points[-ind]\n    \n    \n   #New 2015. define containing folder   \n\n   if(!is.null(inFolder)){\n     if(is.null(mx$inFolder)){\n     \n       inFolder = inFolder[modmod(i, length(inFolder))] \n     }\n     else inFolder = mx$inFolder[1]\n     ssp = unlist(strsplit(as.character(inFolder), \"/\"))\n \n     ftmp = this\n     while(!is.null(ftmp$.parent)) ftmp = ftmp$.parent\n     for(k in 1:length(ssp)){\n       if(is.null(ftmp$getFolder(ssp[k])))\n         ftmp$addFolder(ssp[k], name = ssp[k])\n       ftmp = ftmp$getFolder(ssp[k])\n     }\n     \n   }\n   \n    ind = grep(\"Placemark id\", points)\n   \n   \n   if(is.null(id)){\n     \n     ##ADDED 2015 condition\n     if(is.null(inFolder)){\n       points[ind] = gsub(\"..rep..\", as.character(length(this$.points)+1), points[ind])\n       this$.points[[as.character(length(this$.points)+1)]] = points\n     }\n     else{ \n       points[ind] = gsub(\"..rep..\", as.character(length(ftmp$.points)+1), points[ind])\n       ftmp$.points[[as.character(length(ftmp$.points)+1)]] = points\n     }\n   }\n   else{\n     \n     ##ADDED 2015 condition\n     if(is.null(inFolder)){\n       points[ind] = gsub(\"..rep..\", as.character(id), points[ind])    \n       this$.points[[as.character(id)]] = points\n     }\n     else{\n       points[ind] = gsub(\"..rep..\", as.character(length(ftmp$.points)+1), points[ind])\n       ftmp$.points[[as.character(id)]] = points\n     }\n   }\n   \n#     if(is.null(id)){\n#       points[ind] = gsub(\"..rep..\", as.character(length(this$.points)+1), points[ind])\n#       this$.points[[as.character(length(this$.points)+1)]] = points\n#     }\n#     else{\n#       points[ind] = gsub(\"..rep..\", as.character(id), points[ind])\n#       this$.points[[as.character(id)]] = points\n#     }\n#     \n \n  }\n  \n})\nsetMethodS3(\"addGroundOverlay\", \"RKmlFolder\", function(this, fn = NULL, east=NA, west=NA, north=NA, south=NA, x = NULL, ...) {\n  args = list(...)\n\n\n  \nif(is.null(x)){\n  x = data.frame(fn, east, west, north, south)\n  names(x) = c(\"fn\", \"east\", \"west\", \"north\", \"south\")\n}\n\nif(is.null(fn) & is.null(x$fn))throw(\"If fn is not supplied, you must supply a data frame with a column named 'fn'\")\n\n\n\ntryCatch({\n  x = data.frame(x)\n}, error = function() {\n  warning(\"Could not coerce x into dataframe.\")\n})\n\nif(is.null(x$fn)) x$fn = fn\n\nx$fn = as.character(x$fn)\nunfn = unique(x$fn)\n\n  for(i in 1:length(unfn)){\n    if(!file.exists(unfn[i]) && !url.exists(unfn[i]))throw(\"A file location in fn does not exist\")\n  }\n  \n\n\n\n#Get Frame for kml point\nmpoints = c(\"<GroundOverlay id=\\\"ID\\\">\"                                           \n,\"<name>..rep..</name>\"                                                \n,\"<visibility>1</visibility>\"                                          \n,\"<open>0</open>\"                                                      \n,\"<atom:author><atom:name>..rep..</atom:name></atom:author>\"           \n,\"<atom:link href=\\\"..rep..\\\"/>\"                                       \n,\"<address>..rep..</address>\"                                          \n,\"<xal:AddressDetails>..rep..</xal:AddressDetails>  <!-- xmlns:xal -->\"\n,\"<phoneNumber>..rep..</phoneNumber>\"                                  \n,\"<Snippet maxLines='2'>..rep..</Snippet>\"                             \n,\"<description>..rep..</description>\"                                  \n,\"<AbstractView>#..rep..</AbstractView>\"                               \n,\"<TimeStamp><when>..rep..</when></TimeStamp>\"                         \n,\"<TimeSpan><begin>..repa..</begin><end>..repb..</end></TimeSpan>\"     \n,\"<styleUrl>#..rep..</styleUrl>\"                                       \n,\"<Region>..rep..</Region>\"                                            \n,\"<ExtendedData>..rep..</ExtendedData>\"                                \n,\"<color>..rep..</color>\"                                              \n,\"<drawOrder>..rep..</drawOrder>\"                                      \n,\"<Icon>..rep..</Icon>\"                                                \n,\"<altitude>0</altitude>\"                                              \n,\"<altitudeMode>clampToGround</altitudeMode>\"                          \n,\"<LatLonBox>..rep..</LatLonBox>\"                                      \n,\"<gx:LatLonQuad><coordinates>..rep..</coordinates></gx:LatLonQuad>\"   \n,\"</GroundOverlay>\")  \n\nfor(i in 1:nrow(x)){\n  \n  \n rwest = NULL\n rnorth = NULL\n rsouth = NULL\n reast = NULL\n    \n    \n      if(!file.exists(x$fn[i])){\n        if(is.na(x$east[i]) | is.na(x$west[i]) | is.na(x$north[i]) | is.na(x$south[i]) )\n          throw(\"If you are adding images from a network, you must define east, west, north and south coordinates.\")\n        \n      }\n      else{\n      inf = GDALinfo(x$fn[i], silent = T)\n      if(inf[\"ll.x\"] == 0 | inf[\"ll.y\"] == 0  ){\n        if(is.na(x$east[i]) | is.na(x$west[i]) | is.na(x$north[i]) | is.na(x$south[i]) )\n          throw(paste(\"Could not extract geodata from image. This wouldn't be a problem if you define east, west, north and south coordinates. Error at row \", i, sep=\"\"))\n      \n      }\n      else{\n        rwest = inf[\"ll.x\"] \n        reast = rwest + (inf[\"res.x\"] * inf[\"columns\"])\n        rsouth = inf[\"ll.y\"] \n        rnorth = rsouth + (inf[\"res.y\"] * inf[\"rows\"])\n      }\n   }\n  \n  \n  \n    \n    #Variable list\n    id = NULL                       # Point ID\n    name = NULL                     # string\n    visibility = 1                  # boolean (0-invisible or 1-visible)\n    open = 0                        # boolean (0-closed or 1-open  in kml object tree)\n    atomauthor = NULL                # xmlns:atom \n    atomlinkhref = NULL             # xmlns:atom\n    address = NULL                  # string\n    xalAddressDetails = NULL        # xmlns:xal\n    phoneNumber = NULL              # string\n    Snippet = NULL                  # string with lines seperated by \\n for nice format exa. \"Hello World\\nThis is my\\nPlace \n    description = NULL              # string that may contain CDATA. See CDATA section for more info\n    AbstractView = NULL             # string id (CameraID or LookAtID) must add with createCamera(id, ...) or createLookAt(id, ...)\n    TimeStamp = NULL                # string of date-time in one of the following formats: (YYYY)(YYYY-MM)(YYYY-MM-DD)(YYYY-MM-DDThh:mm:ssZ)(YYYY-MM-DDThh:mm:ss)\n    TimeSpanStart = NULL            # string of date-time in one of the following formats(overides TimeStamp): (YYYY)(YYYY-MM)(YYYY-MM-DD)(YYYY-MM-DDThh:mm:ssZ)(YYYY-MM-DDThh:mm:ss)\n    TimeSpanEnd = NULL              # string of date-time in one of the following formats(overides TimeStamp): (YYYY)(YYYY-MM)(YYYY-MM-DD)(YYYY-MM-DDThh:mm:ssZ)(YYYY-MM-DDThh:mm:ss)  \n    styleUrl = NULL                 # string id (StyleID) must add with createStyle(id, ...)\n    Region = NULL                   # Currently not supported\n    ExtendedData = NULL             # Currently not supported\n  drawOrder = NULL \n  color = \"\"\n  transparency = NULL\n  altitude = NULL                  # meters above/below altiudeMode, clamp altitudeModes ignores altitude\n  altitudeMode = NULL  # one of \"clampToGround\", \"relativeToGround\", \"absolute\", \"clampToSeaFloor\", \"relativeToSeaFloor\" \n    \n  ##ADDED ABILITY 2015(EXPERIMENTAL) \n  #allow style referenes in dataframe. May remove as using this is bad xml practice \n  \n  \n  icon_color = NULL\n  icon_href = NULL\n  icon_transparency = NULL\n  icon_scale = NULL\n  icon_heading = NULL\n  icon_xunits = NULL \n  icon_x = NULL\n  icon_yunits = NULL  \n  icon_y = NULL\t\n  icon_colorMode = NULL\t\n  \n  bal_bgColor = NULL  \n  bal_textColor = NULL\t\n  bal_text = NULL\t\n  bal_displayMode = NULL\n  \n  label_color = NULL  \n  label_transparency = NULL\t\n  label_colorMode = NULL\t\n  label_scale = NULL\t\n  \n  line_color = NULL  \n  line_transparency = NULL\t\n  line_width = NULL\t\n  line_outerColor = NULL\t\n  line_outerTransparency = NULL\t\n  line_outerPortion = NULL\t\n  line_colorMode = NULL\t\n  line_labelVisibility = NULL\t\n  \n  \n  #New 2015\n  inFolder = NULL\n    #Assign values to variables\n    \n  if(length(args)>0){\n    for(j in 1:length(args)){\n      assign(names(args[j]), args[[j]][1]) \n    }\n  }\n  \n  for(j in 1:length(x)){\n    assign(names(x[j]), x[[names(x)[j]]][i] )\n  }\n  \n  \n  if(!is.null(rwest))\n  west = rwest\n  if(!is.null(reast))\n  east = reast\n  if(!is.null(rnorth))\n  north = rnorth\n  if(!is.null(rsouth))\n  south = rsouth\n  \n  \n  if(is.null(altitudeMode)){  \n    if(!is.null(altitude)) altitudeMode = \"relativeToGround\"\n    else altitude = 0\n  }\n  \n  #Get Frame for kml point\n  points = c( \"<GroundOverlay id=\\\"ID\\\">\"                                           \n              ,\"<name>..rep..</name>\"                                                \n              ,\"<visibility>1</visibility>\"                                          \n              ,\"<open>0</open>\"                                                      \n              ,\"<atom:author><atom:name>..rep..</atom:name></atom:author>\"           \n              ,\"<atom:link href=\\\"..rep..\\\"/>\"                                       \n              ,\"<address>..rep..</address>\"                                          \n              ,\"<xal:AddressDetails>..rep..</xal:AddressDetails>  <!-- xmlns:xal -->\"\n              ,\"<phoneNumber>..rep..</phoneNumber>\"                                  \n              ,\"<Snippet maxLines='2'>..rep..</Snippet>\"                             \n              ,\"<description>..rep..</description>\"                                  \n              ,\"<AbstractView>#..rep..</AbstractView>\"                               \n              ,\"<TimeStamp><when>..rep..</when></TimeStamp>\"                         \n              ,\"<TimeSpan><begin>..repa..</begin><end>..repb..</end></TimeSpan>\"     \n              ,\"<styleUrl>#..rep..</styleUrl>\"                                       \n              ,\"<Region>..rep..</Region>\"                                            \n              ,\"<ExtendedData>..rep..</ExtendedData>\"                                \n              ,\"<color>..rep..</color>\"                                              \n              ,\"<drawOrder>..rep..</drawOrder>\"                                      \n              ,\"<Icon>..rep..</Icon>\"                                                \n              ,\"<altitude>0</altitude>\"                                              \n              ,\"<altitudeMode>clampToGround</altitudeMode>\"                          \n              ,\"<LatLonBox>..rep..</LatLonBox>\"                                      \n              ,\"<gx:LatLonQuad><coordinates>..rep..</coordinates></gx:LatLonQuad>\"   \n              ,\"</GroundOverlay>\"   )\n    \n  ind = grep(\"altitude\", points) \n    if(!is.null(altitude)){\n   \n      if(is.na(as.numeric(as.character(altitude)))) throw(\"altitude must be numeric or able to coerce to numeric \")\n      altitude = as.numeric(as.character(altitude))\n      points[ind] = gsub(\"..rep..\", altitude, points[ind])\n    }\n  else points = points[-ind]\n    \n  \n  ind = grep(\"drawOrder\", points)\n  if(!is.null(drawOrder)){\n    drawOrder = as.numeric(as.character(drawOrder))\n    points[ind] = gsub(\"..rep..\", drawOrder, points[ind])\n  }\n  else points = points[-ind]\n  \n    \n    \n    \n    if(!is.null(altitudeMode)){\n      if(!altitudeMode %in% c(\"clampToGround\", \"relativeToGround\", \"absolute\", \"clampToSeaFloor\", \"relativeToSeaFloor\"))\n        throw(\"altitudeMode must be one of the following: clampToGround, relativeToGround, absolute, clampToSeaFloor, relativeToSeaFloor\")\n      ind = grep(\"altitudeMode\", points)\n      if(altitudeMode == \"clampToSeaFloor\" || altitudeMode == \"relativeToSeaFloor\"){\n        points[ind] = gsub(\"altitudeMode\", \"gx:altitudeMode\", points[ind])\n      }\n      points[ind] = gsub(\"clampToGround\", altitudeMode, points[ind])\n    }\n    \n    ind = grep(\"<name>\", points)\n    if(!is.null(name)) points[ind] = gsub(\"..rep..\", name, points[ind])\n    else points = points[-ind]\n    \n    if(!is.null(visibility)){\n      visibility = as.numeric(as.character(visibility))\n      if(! (visibility==0 | visibility==1)) throw(\"visibility must be either 0 or 1 (boolean)\")\n      \n      ind = grep(\"visibility\", points)\n      points[ind] = gsub(\"1\", visibility, points[ind])\n    }\n    if(!is.null(open)){\n      open = as.numeric(as.character(open))\n      if(! (open==0 | open==1)) throw(\"open must be either 0 or 1 (boolean)\")\n      ind = grep(\"open\", points)\n      points[ind] = gsub(\"0\", open, points[ind])\n    }\n    \n    ind = grep(\"atom:author\", points)\n    if(!is.null(atomauthor)) points[ind] = gsub(\"..rep..\", atomauthor, points[ind])\n    else points = points[-ind]\n    \n    ind = grep(\"atom:link\", points)\n    if(!is.null(atomlinkhref)) points[ind] = gsub(\"..rep..\", atomlinkhref, points[ind])\n    else points = points[-ind]\n    \n    ind = grep(\"xal:AddressDetails\", points)\n    if(!is.null(xalAddressDetails)) points[ind] = gsub(\"..rep..\", xalAddressDetails, points[ind])\n    else points = points[-ind]\n    \n    ind = grep(\"address\", points)\n    if(!is.null(address)) points[ind] = gsub(\"..rep..\", address, points[ind])\n    else points = points[-ind]\n    \n    ind = grep(\"phoneNumber\", points)\n    if(!is.null(phoneNumber)) points[ind] = gsub(\"..rep..\", phoneNumber, points[ind])\n    else points = points[-ind]\n    \n    \n    ind = grep(\"Snippet\", points)\n    if(!is.null(Snippet)){\n      Snippet = as.character(Snippet)\n      maxlines = length(unlist(strsplit(Snippet, \"\\n\")))\n      points[ind] = gsub(\"2\", maxlines, points[ind])\n      points[ind] = gsub(\"..rep..\", Snippet, points[ind])\n    }\n    else points = points[-ind]\n    \n    \n    ind = grep(\"description\", points)\n    if(!is.null(description)) points[ind] = gsub(\"..rep..\", description, points[ind])\n    else points = points[-ind]\n    \n    \n  \n  ind = grep(\"AbstractView\", points)\n  if(!is.null(AbstractView)){\n    tmp = this\n    while(!is.null(tmp$.parent)) tmp = tmp$.parent\n    if(!AbstractView %in% names(tmp$.Aviewlist))warning(paste(\"No Abstractview id found for '\", AbstractView, \"'. You must create an abstractview with yourkmlobj$addAbstractView(id = '\", AbstractView,\"').\", sep = \"\"))\n    reptxt = tmp$.Aviewlist[[AbstractView]]\n    points[ind] = paste(reptxt, collapse = \"\")\n  }\n  else points = points[-ind]\n    \n    #TODO Add time format check!\n    ind = grep(\"TimeStamp\", points)\n    if(!is.null(TimeStamp)) points[ind] = gsub(\"..rep..\", TimeStamp, points[ind])\n    else points = points[-ind]\n    \n    \n    #TODO Add time format check!\n    ind = grep(\"TimeSpan\", points)\n    if(!(is.null(TimeSpanStart) & is.null(TimeSpanEnd))){\n      if(!is.null(TimeSpanStart)) points[ind] = gsub(\"..repa..\", TimeStamp, points[ind])\n      else gsub(\"<begin>..repa..</begin>\", \"\", points[ind])\n      if(!is.null(TimeSpanEnd)) points[ind] = gsub(\"..repb..\", TimeStamp, points[ind])\n      else gsub(\"<end>..repb..</end>\", \"\", points[ind])\n    }\n    else points = points[-ind]\n    \n    \n    ind = grep(\"styleUrl\", points)\n    if(!is.null(styleUrl)){\n      points[ind] = gsub(\"..rep..\", styleUrl, points[ind])\n      tmp = this\n      while(!is.null(tmp$.parent)) tmp = tmp$.parent\n      if(!styleUrl %in% names(tmp$.styles))warning(paste(\"No style id found for '\", styleUrl, \"'. You must create a style with yourkmlobj$createStyle(id = '\", styleUrl,\"').\", sep = \"\"))\n    }\n    else points = points[-ind]\n    \n  color = color2kmlcolor(color = color, transparency = transparency)\n  \n  \n  ind = grep(\"<color>\", points)\n  if(!is.null(color)){\n    points[ind] = gsub(\"..rep..\", color, points[ind])\n  }\n  else points = points[-ind]\n    \n  box = \"\"\n      \n      box = paste(box, \"<north>\", north, \"</north>\", sep=\"\")\n      box = paste(box, \"<south>\", south, \"</south>\", sep=\"\")\n      box = paste(box, \"<east>\", east, \"</east>\", sep=\"\")\n      box = paste(box, \"<west>\", west, \"</west>\", sep=\"\")\n  \n    \n    ind = grep(\"LatLonBox\", points)\n    points[ind] = gsub(\"..rep..\",box, points[ind])\n    \n\n  ##<For non-rectangular image overlays. Not currently supported\n  qbox = NULL\n  ind = grep(\"LatLonQuad\", points)\n  if(!is.null(qbox))\n    points[ind] = gsub(\"..rep..\",box, points[ind])\n  else points = points[-ind]\n  ##/>\n  \n  ind = grep(\"Icon\", points)\n  points[ind] = gsub(\"..rep..\", fn, points[ind])\n    \n    if(!is.null(id)){\n      ind = grep(\"GroundOverlay\", points)\n      points[ind] = gsub(\"ID\", id, points[ind])\n    }\n    \n    \n    \n    ind = grep(\"Region\", points)\n    if(!is.null(Region)) points[ind] = gsub(\"..rep..\", Region, points[ind])\n    else points = points[-ind]\n    \n    ind = grep(\"ExtendedData\", points)\n    if(!is.null(ExtendedData)) points[ind] = gsub(\"..rep..\", ExtendedData, points[ind])\n    else points = points[-ind]\n    \n    \n  #New 2015. Allow define folder \n  if(!is.null(inFolder)){\n    \n    ssp = unlist(strsplit(as.character(inFolder), \"/\"))\n    ftmp = this\n    while(!is.null(ftmp$.parent)) ftmp = ftmp$.parent\n    for(k in 1:length(ssp)){\n      if(is.null(ftmp$getFolder(ssp[k])))\n        ftmp$addFolder(ssp[k], name = ssp[k])\n      ftmp = ftmp$getFolder(ssp[k])\n    }\n    \n  }\n  \n  \n    ind = grep(\"GroundOverlay\", points)\n  \n  \n  if(is.null(id)){\n    \n    ##ADDED 2015 condition\n    if(is.null(inFolder)){\n      points[ind] = gsub(\"..rep..\", as.character(length(this$.points)+1), points[ind])\n      this$.points[[as.character(length(this$.points)+1)]] = points\n    }\n    else{ \n      points[ind] = gsub(\"..rep..\", as.character(length(ftmp$.points)+1), points[ind])\n      ftmp$.points[[as.character(length(ftmp$.points)+1)]] = points\n    }\n  }\n  else{\n    \n    ##ADDED 2015 condition\n    if(is.null(inFolder)){\n      points[ind] = gsub(\"..rep..\", as.character(id), points[ind])    \n      this$.points[[as.character(id)]] = points\n    }\n    else{\n      points[ind] = gsub(\"..rep..\", as.character(length(ftmp$.points)+1), points[ind])\n      ftmp$.points[[as.character(id)]] = points\n    }\n  }\n  \n  \n#     if(is.null(id)){\n#       points[ind] = gsub(\"..rep..\", as.character(length(this$.points)+1), points[ind])\n#       this$.points[[as.character(length(this$.points)+1)]] = points\n#     }\n#     else{\n#       points[ind] = gsub(\"..rep..\", as.character(id), points[ind])\n#       this$.points[[as.character(id)]] = points\n#     }\n\n}\n  \n})\nsetMethodS3(\"addScreenOverlay\", \"RKmlFolder\", function(this, fn = NULL, ...) {\n  args = list(...)\n  \n  if(is.null(fn))throw(\"fn must not be null\")\n  else{\n    if(!file.exists(fn))throw(\"file fn does not exist\")\n  }\n  \n  \n  #Variable list\n  id = NULL                       # Point ID\n  name = NULL                     # string\n  visibility = 1                  # boolean (0-invisible or 1-visible)\n  open = 0                        # boolean (0-closed or 1-open  in kml object tree)\n  atomauthor = NULL                # xmlns:atom \n  atomlinkhref = NULL             # xmlns:atom\n  address = NULL                  # string\n  xalAddressDetails = NULL        # xmlns:xal\n  phoneNumber = NULL              # string\n  Snippet = NULL                  # string with lines seperated by \\n for nice format exa. \"Hello World\\nThis is my\\nPlace \n  description = NULL              # string that may contain CDATA. See CDATA section for more info\n  AbstractView = NULL             # string id (CameraID or LookAtID) must add with createCamera(id, ...) or createLookAt(id, ...)\n  TimeStamp = NULL                # string of date-time in one of the following formats: (YYYY)(YYYY-MM)(YYYY-MM-DD)(YYYY-MM-DDThh:mm:ssZ)(YYYY-MM-DDThh:mm:ss)\n  TimeSpanStart = NULL            # string of date-time in one of the following formats(overides TimeStamp): (YYYY)(YYYY-MM)(YYYY-MM-DD)(YYYY-MM-DDThh:mm:ssZ)(YYYY-MM-DDThh:mm:ss)\n  TimeSpanEnd = NULL              # string of date-time in one of the following formats(overides TimeStamp): (YYYY)(YYYY-MM)(YYYY-MM-DD)(YYYY-MM-DDThh:mm:ssZ)(YYYY-MM-DDThh:mm:ss)  \n  styleUrl = NULL                 # string id (StyleID) must add with createStyle(id, ...)\n  Region = NULL                   # Currently not supported\n  ExtendedData = NULL             # Currently not supported\n  drawOrder = NULL \n  color = \"\"\n  transparency = NULL\n  rotation = 0\n  \n  \n  overlay_x = .5\n  overlay_y = .5\n  overlay_xunit = \"fraction\"\n  overlay_yunit = \"fraction\"\n  screen_x = .5\n  screen_y = .5\n  screen_xunit = \"fraction\"\n  screen_yunit = \"fraction\"\n  rotation_x = screen_x\n  rotation_y = screen_y\n  rotation_xunit = screen_xunit\n  rotation_yunit = screen_yunit\n  size_x = -1\n  size_y = -1\n  size_xunit = \"fraction\"\n  size_yunit = \"fraction\"  \n  \n  #New 2015\n  inFolder = NULL\n  \n  #Assign values to variables\n    \n  if(length(args)>0){\n    for(j in 1:length(args)){\n      assign(names(args[j]), args[[j]][1]) \n    }\n  }\n  \n  \n  #Get Frame for kml point\n  points = c( \"<ScreenOverlay id=\\\"ID\\\">\"                                                    \n              ,\"<name>..rep..</name>\"                                                         \n              ,\"<visibility>1</visibility>\"                                                   \n              ,\"<open>0</open>\"                                                               \n              ,\"<atom:author><atom:name>..rep..</atom:name></atom:author>\"                    \n              ,\"<atom:link href=\\\"..rep..\\\"/>\"                                                \n              ,\"<address>..rep..</address>\"                                                   \n              ,\"<xal:AddressDetails>..rep..</xal:AddressDetails>  <!-- xmlns:xal -->\"         \n              ,\"<phoneNumber>..rep..</phoneNumber>\"                                           \n              ,\"<Snippet maxLines='2'>..rep..</Snippet>\"                                      \n              ,\"<description>..rep..</description>\"                                           \n              ,\"<AbstractView>#..rep..</AbstractView>\"                                        \n              ,\"<TimeStamp><when>..rep..</when></TimeStamp>\"                                  \n              ,\"<TimeSpan><begin>..repa..</begin><end>..repb..</end></TimeSpan>\"              \n              ,\"<styleUrl>#..rep..</styleUrl>\"                                                \n              ,\"<Region>..rep..</Region>\"                                                     \n              ,\"<ExtendedData>..rep..</ExtendedData>\"                                         \n              ,\"<color>..rep..</color>\"                                                       \n              ,\"<drawOrder>..rep..</drawOrder>\"                                               \n              ,\"<Icon>..rep..</Icon>\"                                                         \n              ,\"<overlayXY x='..repx..' y='..repy..' xunits='..repxu..' yunits='..repyu..'/>\" \n              ,\"<screenXY x='..repx..' y='..repy..' xunits='..repxu..' yunits='..repyu..'/>\"  \n              ,\"<rotationXY x='..repx..' y='..repy..' xunits='..repxu..' yunits='..repyu..'/>\"\n              ,\"<size x='..repx..' y='..repy..' xunits='..repxu..' yunits='..repyu..'/>\"      \n              ,\"<rotation>..rep..</rotation>\"                                                 \n              ,\"</ScreenOverlay>\"  )\n  \n  ind = grep(\"/rotation\", points, fixed = T) \n  if(!is.null(rotation)){\n    if(is.na(as.numeric(rotation))) throw(\"rotation must be numeric or able to coerce to numeric \")\n    rotation = as.numeric(rotation)\n    points[ind] = gsub(\"..rep..\", rotation, points[ind])\n  }\n  else points = points[-ind]\n  \n  \n  ind = grep(\"drawOrder\", points)\n  if(!is.null(drawOrder)){\n    drawOrder = as.numeric(as.character(drawOrder))\n    points[ind] = gsub(\"..rep..\", drawOrder, points[ind])\n  }\n  else points = points[-ind]\n  \n  \n  \n  \n  ind = grep(\"<name>\", points)\n  if(!is.null(name)) points[ind] = gsub(\"..rep..\", name, points[ind])\n  else points = points[-ind]\n  \n  if(!is.null(visibility)){\n    if(! (as.numeric(visibility)==0 | as.numeric(visibility)==1)) throw(\"visibility must be either 0 or 1 (boolean)\")\n    visibility = as.numeric(visibility)\n    ind = grep(\"visibility\", points)\n    points[ind] = gsub(\"1\", visibility, points[ind])\n  }\n  if(!is.null(open)){\n    if(! (as.numeric(open)==0 | as.numeric(open)==1)) throw(\"open must be either 0 or 1 (boolean)\")\n    open = as.numeric(open)\n    ind = grep(\"open\", points)\n    points[ind] = gsub(\"0\", open, points[ind])\n  }\n  \n  ind = grep(\"atom:author\", points)\n  if(!is.null(atomauthor)) points[ind] = gsub(\"..rep..\", atomauthor, points[ind])\n  else points = points[-ind]\n  \n  ind = grep(\"atom:link\", points)\n  if(!is.null(atomlinkhref)) points[ind] = gsub(\"..rep..\", atomlinkhref, points[ind])\n  else points = points[-ind]\n  \n  ind = grep(\"xal:AddressDetails\", points)\n  if(!is.null(xalAddressDetails)) points[ind] = gsub(\"..rep..\", xalAddressDetails, points[ind])\n  else points = points[-ind]\n  \n  ind = grep(\"address\", points)\n  if(!is.null(address)) points[ind] = gsub(\"..rep..\", address, points[ind])\n  else points = points[-ind]\n  \n  ind = grep(\"phoneNumber\", points)\n  if(!is.null(phoneNumber)) points[ind] = gsub(\"..rep..\", phoneNumber, points[ind])\n  else points = points[-ind]\n  \n  \n  ind = grep(\"Snippet\", points)\n  if(!is.null(Snippet)){\n    Snippet = as.character(Snippet)\n    maxlines = length(unlist(strsplit(Snippet, \"\\n\")))\n    points[ind] = gsub(\"2\", maxlines, points[ind])\n    points[ind] = gsub(\"..rep..\", Snippet, points[ind])\n  }\n  else points = points[-ind]\n  \n  \n  ind = grep(\"description\", points)\n  if(!is.null(description)) points[ind] = gsub(\"..rep..\", description, points[ind])\n  else points = points[-ind]\n  \n  \n  \n  ind = grep(\"AbstractView\", points)\n  if(!is.null(AbstractView)){\n    tmp = this\n    while(!is.null(tmp$.parent)) tmp = tmp$.parent\n    if(!AbstractView %in% names(tmp$.Aviewlist))warning(paste(\"No Abstractview id found for '\", AbstractView, \"'. You must create an abstractview with yourkmlobj$addAbstractView(id = '\", AbstractView,\"').\", sep = \"\"))\n    reptxt = tmp$.Aviewlist[[AbstractView]]\n    points[ind] = paste(reptxt, collapse = \"\")\n  }\n  else points = points[-ind]\n  \n  #TODO Add time format check!\n  ind = grep(\"TimeStamp\", points)\n  if(!is.null(TimeStamp)) points[ind] = gsub(\"..rep..\", TimeStamp, points[ind])\n  else points = points[-ind]\n  \n  \n  #TODO Add time format check!\n  ind = grep(\"TimeSpan\", points)\n  if(!(is.null(TimeSpanStart) & is.null(TimeSpanEnd))){\n    if(!is.null(TimeSpanStart)) points[ind] = gsub(\"..repa..\", TimeStamp, points[ind])\n    else gsub(\"<begin>..repa..</begin>\", \"\", points[ind])\n    if(!is.null(TimeSpanEnd)) points[ind] = gsub(\"..repb..\", TimeStamp, points[ind])\n    else gsub(\"<end>..repb..</end>\", \"\", points[ind])\n  }\n  else points = points[-ind]\n  \n  #New 2015. define containing folder   \n  \n  if(!is.null(inFolder)){\n    \n    ssp = unlist(strsplit(as.character(inFolder), \"/\"))\n    ftmp = this\n    while(!is.null(ftmp$.parent)) ftmp = ftmp$.parent\n    for(k in 1:length(ssp)){\n      if(is.null(ftmp$getFolder(ssp[k])))\n        ftmp$addFolder(ssp[k], name = ssp[k])\n      ftmp = ftmp$getFolder(ssp[k])\n    }\n    \n  }\n  \n  \n  ind = grep(\"styleUrl\", points)\n  if(!is.null(styleUrl)){\n    points[ind] = gsub(\"..rep..\", styleUrl, points[ind])\n    tmp = this\n    while(!is.null(tmp$.parent)) tmp = tmp$.parent\n    if(!styleUrl %in% names(tmp$.styles))warning(paste(\"No style id found for '\", styleUrl, \"'. You must create a style with yourkmlobj$createStyle(id = '\", styleUrl,\"').\", sep = \"\"))\n  }\n  else points = points[-ind]\n  \n  tra = as.hexmode(round(as.numeric(transparency)*255))\n  if(color == \"\")color = NULL\n  if(!is.null(color)){\n    if(color %in% colors()){\n      color = col2rgb(color)\n      color = as.character(as.hexmode(color))\n      color = paste(color[3], color[2], color[1], sep=\"\")\n    }\n    else if(nrow(color)>2){\n      color = as.character(as.hexmode(color))\n      color = paste(color[3], color[2], color[1], sep=\"\")\n    } \n    \n    color = paste(\"#\", tra, color, sep=\"\")\n  }\n  \n  ind = grep(\"<color>\", points)\n  if(!is.null(color)){\n    points[ind] = gsub(\"..rep..\", color, points[ind])\n  }\n  else points = points[-ind]\n\n  \n  ind = grep(\"overlayXY\", points)\n  points[ind] = sub(\"..repx..\",overlay_x, points[ind], fixed = T)\n  points[ind] = sub(\"..repy..\",overlay_y, points[ind], fixed = T)\n  points[ind] = sub(\"..repxu..\",overlay_xunit, points[ind], fixed = T)\n  points[ind] = sub(\"..repyu..\",overlay_yunit, points[ind], fixed = T)\n  ind = grep(\"screenXY\", points)\n\n  points[ind] = sub(\"..repx..\",screen_x, points[ind], fixed = T)\n  points[ind] = sub(\"..repy..\",screen_y, points[ind], fixed = T)\n  points[ind] = sub(\"..repxu..\",screen_xunit, points[ind], fixed = T)\n  points[ind] = sub(\"..repyu..\",screen_yunit, points[ind], fixed = T)\n  ind = grep(\"rotationXY\", points)\n\n  points[ind] = sub(\"..repx..\",rotation_x, points[ind], fixed = T)\n  points[ind] = sub(\"..repy..\",rotation_y, points[ind], fixed = T)\n  points[ind] = sub(\"..repxu..\",rotation_xunit, points[ind], fixed = T)\n  points[ind] = sub(\"..repyu..\",rotation_yunit, points[ind], fixed = T)\n  ind = grep(\"size\", points)\n  points[ind] = sub(\"..repx..\",size_x, points[ind], fixed = T)\n  points[ind] = sub(\"..repy..\",size_y, points[ind], fixed = T)\n  points[ind] = sub(\"..repxu..\",size_xunit, points[ind], fixed = T)\n  points[ind] = sub(\"..repyu..\",size_yunit, points[ind], fixed = T)\n  \n  \n  ind = grep(\"Icon\", points)\n  points[ind] = gsub(\"..rep..\", fn, points[ind])\n  \n  if(!is.null(id)){\n    ind = grep(\"GroundOverlay\", points)\n    points[ind] = gsub(\"ID\", id, points[ind])\n  }\n  \n  \n  \n  ind = grep(\"Region\", points)\n  if(!is.null(Region)) points[ind] = gsub(\"..rep..\", Region, points[ind])\n  else points = points[-ind]\n  \n  ind = grep(\"ExtendedData\", points)\n  if(!is.null(ExtendedData)) points[ind] = gsub(\"..rep..\", ExtendedData, points[ind])\n  else points = points[-ind]\n  \n  \n  ind = grep(\"GroundOverlay\", points)\n  \n  \n  if(is.null(id)){\n    \n    ##ADDED 2015 condition\n    if(is.null(inFolder)){\n      points[ind] = gsub(\"..rep..\", as.character(length(this$.points)+1), points[ind])\n      this$.points[[as.character(length(this$.points)+1)]] = points\n    }\n    else{ \n      points[ind] = gsub(\"..rep..\", as.character(length(ftmp$.points)+1), points[ind])\n      ftmp$.points[[as.character(length(ftmp$.points)+1)]] = points\n    }\n  }\n  else{\n    \n    ##ADDED 2015 condition\n    if(is.null(inFolder)){\n      points[ind] = gsub(\"..rep..\", as.character(id), points[ind])    \n      this$.points[[as.character(id)]] = points\n    }\n    else{\n      points[ind] = gsub(\"..rep..\", as.character(length(ftmp$.points)+1), points[ind])\n      ftmp$.points[[as.character(id)]] = points\n    }\n  }\n  \n#   \n#   if(is.null(id)){\n#     points[ind] = gsub(\"..rep..\", as.character(length(this$.points)+1), points[ind])\n#     this$.points[[as.character(length(this$.points)+1)]] = points\n#   }\n#   else{\n#     points[ind] = gsub(\"..rep..\", as.character(id), points[ind])\n#     this$.points[[as.character(id)]] = points\n#   }\n#   \n  \n  \n})\nsetMethodS3(\"getFolder\", \"RKmlFolder\", function(this, fid, silent = T, ...) {\n  if(is.null(this$.folders[[fid]])){\n    if(!silent)message(paste(\"Folder '\", fid, \"' in '\", this$.id, \"' does not exist\", sep = \"\"))\n    return(NULL)\n  }\n  else{\n    if(!silent)message(paste(\"get Folder '\", fid, \"' from '\", this$.id, \"'\", sep = \"\") )\n    return(this$.folders[[fid]])\n  }\n})\nsetMethodS3(\"addFolder\", \"RKmlFolder\", function(this, fid, silent = T, ...) {\n  \n  \n  if(!is.null(this$.folders[[fid]])){\n    if(!silent)message(\"This file alreadys exists at this location. You can add to this folder with getFolder(id)$add.. or you can remove it with removeFolder(id).\") \n  }\n  else{\n    newfol = RKmlFolder(id = fid, parent = this)\n  \n    args = list(...)\n    \n    #Variable list\n\n    name = NULL                     # string\n    visibility = 1                  # boolean (0-invisible or 1-visible)\n    open = 0                        # boolean (0-closed or 1-open  in kml object tree)\n    atomauthor = NULL    \t          # xmlns:atom \n    atomlinkhref = NULL             # xmlns:atom\n    address = NULL                  # string\n    xalAddressDetails = NULL        # xmlns:xal\n    phoneNumber = NULL              # string\n    Snippet = NULL                  # string with lines seperated by \\n for nice format exa. \"Hello World\\nThis is my\\nPlace \n    description = NULL              # string that may contain CDATA. See CDATA section for more info\n    AbstractView = NULL             # string id (CameraID or LookAtID) must add with createCamera(id, ...) or createLookAt(id, ...)\n    TimeStamp = NULL                # string of date-time in one of the following formats: (YYYY)(YYYY-MM)(YYYY-MM-DD)(YYYY-MM-DDThh:mm:ssZ)(YYYY-MM-DDThh:mm:ss)\n    TimeSpanStart = NULL            # string of date-time in one of the following formats(overides TimeStamp): (YYYY)(YYYY-MM)(YYYY-MM-DD)(YYYY-MM-DDThh:mm:ssZ)(YYYY-MM-DDThh:mm:ss)\n    TimeSpanEnd = NULL              # string of date-time in one of the following formats(overides TimeStamp): (YYYY)(YYYY-MM)(YYYY-MM-DD)(YYYY-MM-DDThh:mm:ssZ)(YYYY-MM-DDThh:mm:ss)  \n    styleUrl = NULL                 # string id (StyleID) must add with createStyle(id, ...)\n    id = fid                       # Point ID\n    Region = NULL                   # Currently not supported\n    ExtendedData = NULL             # Currently not supported\n    \n    #Assign values to variables\n    \n    points = c(\"<Folder id='..rep..'>\"                                          \n               ,\"<name>..rep..</name>\"                                           \n               ,\"<visibility>1</visibility>\"                                     \n               ,\"<open>0</open>\"                                                 \n               ,\"<atom:author><atom:name>..rep..</atom:name></atom:author>\"      \n               ,\"<atom:link href='..rep..'/>\"                                    \n               ,\"<address>..rep..</address>\"                                     \n               ,\"<xal:AddressDetails>..rep..</xal:AddressDetails>\"               \n               ,\"<phoneNumber>..rep..</phoneNumber>\"                             \n               ,\"<Snippet maxLines='2'>..rep..</Snippet>\"                        \n               ,\"<description>..rep..</description>\"                             \n               ,\"<AbstractView>#..rep..</AbstractView>\"                          \n               ,\"<TimeStamp><when>..rep..</when></TimeStamp>\"                    \n               ,\"<TimeSpan><begin>..repa..</begin><end>..repb..</end></TimeSpan>\"\n               ,\"<styleUrl>#..rep..</styleUrl>\"                                  \n               ,\"<Region>..rep..</Region>\"                                       \n               ,\"<ExtendedData>..rep..</ExtendedData>\"        )\n       \n    if(length(args)>0){\n      for(j in 1:length(args)){\n        assign(names(args[j]), args[[j]][1]) \n      }\n    }\n    \n    ind = grep(\"<name>\", points)\n    if(!is.null(name)) points[ind] = gsub(\"..rep..\", name, points[ind])\n    else points = points[-ind]\n    \n    if(!is.null(visibility)){\n      visibility = as.numeric(as.character(visibility))\n      if(! (visibility==0 | visibility==1)) throw(\"visibility must be either 0 or 1 (boolean)\")\n      ind = grep(\"visibility\", points)\n      points[ind] = gsub(\"1\", visibility, points[ind])\n    }\n    if(!is.null(open)){\n      open = as.numeric(as.character(open))\n      if(! (as.numeric(open)==0 | as.numeric(open)==1)) throw(\"open must be either 0 or 1 (boolean)\")\n      ind = grep(\"open\", points)\n      points[ind] = gsub(\"0\", open, points[ind])\n    }\n    \n    ind = grep(\"atom:author\", points)\n    if(!is.null(atomauthor)) points[ind] = gsub(\"..rep..\", atomauthor, points[ind])\n    else points = points[-ind]\n    \n    ind = grep(\"atom:link\", points)\n    if(!is.null(atomlinkhref)) points[ind] = gsub(\"..rep..\", atomlinkhref, points[ind])\n    else points = points[-ind]\n    \n    ind = grep(\"xal:AddressDetails\", points)\n    if(!is.null(xalAddressDetails)) points[ind] = gsub(\"..rep..\", xalAddressDetails, points[ind])\n    else points = points[-ind]\n    \n    ind = grep(\"address\", points)\n    if(!is.null(address)) points[ind] = gsub(\"..rep..\", address, points[ind])\n    else points = points[-ind]\n    \n    ind = grep(\"phoneNumber\", points)\n    if(!is.null(phoneNumber)) points[ind] = gsub(\"..rep..\", phoneNumber, points[ind])\n    else points = points[-ind]\n    \n    \n    ind = grep(\"Snippet\", points)\n    if(!is.null(Snippet)){\n      Snippet = as.character(Snippet)\n      maxlines = length(unlist(strsplit(Snippet, \"\\n\")))\n      points[ind] = gsub(\"2\", maxlines, points[ind])\n      points[ind] = gsub(\"..rep..\", Snippet, points[ind])\n    }\n    else points = points[-ind]\n    \n    \n    ind = grep(\"description\", points)\n    if(!is.null(description)) points[ind] = gsub(\"..rep..\", description, points[ind])\n    else points = points[-ind]\n    \n    ind = grep(\"AbstractView\", points)\n    if(!is.null(AbstractView)){\n      tmp = this\n      while(!is.null(tmp$.parent)) tmp = tmp$.parent\n      if(!AbstractView %in% names(tmp$.Aviewlist))warning(paste(\"No Abstractview id found for '\", AbstractView, \"'. You must create an abstractview with yourkmlobj$addAbstractView(id = '\", AbstractView,\"').\", sep = \"\"))\n      reptxt = tmp$.Aviewlist[[AbstractView]]\n      points[ind] = paste(reptxt, collapse = \"\")\n    }\n    else points = points[-ind]\n    \n    \n    \n    #TODO Add time format check!\n    ind = grep(\"TimeStamp\", points)\n    if(!is.null(TimeStamp)) points[ind] = gsub(\"..rep..\", TimeStamp, points[ind])\n    else points = points[-ind]\n    \n    \n    #TODO Add time format check!\n    ind = grep(\"TimeSpan\", points)\n    if(!(is.null(TimeSpanStart) & is.null(TimeSpanEnd))){\n      if(!is.null(TimeSpanStart)) points[ind] = gsub(\"..repa..\", TimeStamp, points[ind])\n      else gsub(\"<begin>..repa..</begin>\", \"\", points[ind])\n      if(!is.null(TimeSpanEnd)) points[ind] = gsub(\"..repb..\", TimeStamp, points[ind])\n      else gsub(\"<end>..repb..</end>\", \"\", points[ind])\n    }\n    else points = points[-ind]\n    \n    \n    ind = grep(\"styleUrl\", points)\n    if(!is.null(styleUrl)){\n      points[ind] = gsub(\"..rep..\", styleUrl, points[ind])\n      tmp = this\n      while(!is.null(tmp$.parent)) tmp = tmp$.parent\n      if(!styleUrl %in% names(tmp$.styles))warning(paste(\"No style id found for '\", styleUrl, \"'. You must create a style with yourkmlobj$createStyle(id = '\", styleUrl,\"').\", sep = \"\"))\n    }\n    else points = points[-ind]\n    \n    \n    \n    ind = grep(\"Region\", points)\n    if(!is.null(Region)) points[ind] = gsub(\"..rep..\", Region, points[ind])\n    else points = points[-ind]\n    \n    ind = grep(\"ExtendedData\", points)\n    if(!is.null(ExtendedData)) points[ind] = gsub(\"..rep..\", ExtendedData, points[ind])\n    else points = points[-ind]\n    \n    \n    ind = grep(\"Folder id\", points)\n    if(!is.null(id)){\n      points[ind] = gsub(\"..rep..\", as.character(id), points[ind])\n    }\n    else throw(\"Folder must have an id\")\n    \n    newfol$.foldertxt = points\n    \n    this$.folders[[fid]] = newfol\n    if(!silent)message(paste(\"Folder '\", fid, \"' to '\", this$.id, \"' Added\", sep = \"\"))\n  }\n})\nsetMethodS3(\"removeFolder\", \"RKmlFolder\", function(this, fid, silent = T, ...) {\n  this$.folders[[fid]] = NULL\n  if(!silent)message(paste(\"folder '\", fid, \"' removed from '\", this$.id, \"'\", sep = \"\"))\n})\nsetMethodS3(\"removeStyle\", \"RKmlFolder\", function(this, styleid = NULL, styletype = NULL, silent = T, ...) {\n  tmp = this\n  while(!is.null(tmp$.parent)) tmp = tmp$.parent\n  \n  if(is.null(styleid)) throw(\"You must suppply the styleid to remove, mykmlobj$listStyles()\")\n  if(is.null(styletype)){ \n    tmp$.styles[[styleid]] = NULL\n    if(!silent)message(paste(\"Style '\", styleid, \"' removed\", sep = \"\"))\n  }\n  else{\n    st = c(\"PolyStyle\", \"IconStyle\", \"LineStyle\", \"BalloonStyle\", \"LabelStyle\")\n    if(!styletype %in% st)throw(\"styletype must be one of PolyStyle, IconStyle, LineStyle, BalloonStyle or LabelStyle\")\n    temp = tmp$.styles[[styleid]]\n    ind = grep(styletype, temp)[1]\n    if(!is.na(ind))temp = temp[-ind]\n    tmp$.styles[[styleid]] = temp\n    if(!silent)message(paste(styletype, \" removed from Style '\", styleid, \".\", sep = \"\"))\n  }\n\n})\nsetMethodS3(\"liststyles\", \"RKmlFolder\", function(this, ...) {\n  tmp = this\n  while(!is.null(tmp$.parent)) tmp = tmp$.parent\n  for(i in 1:length(tmp$.styles)){\n\n    st = tmp$.styles[[i]]\n#     j = 2\n#     while(j < length(st)){\n#       start = unlist(gregexpr(pattern ='<', st[j]))[1]\n#       end = unlist(gregexpr(pattern ='>', st[j]))[1]\n#       print(paste(\"     \", substr(st[j], start, end)))\n#       j = j + 1\n#     }\n#     \nprint(st)\n  }\n  \n  })\nsetMethodS3(\"addNetworkLink\", \"RKmlFolder\", function(this, href = NULL, ...) {\n  args = list(...)\n  \n  \n  if(is.null(href))throw(\"You must specify the local or network address href argument\")\n \n  #Get Frame for kml point\n  mpoints = c( \"<NetworkLink id='..rep..'>\"                                                                    \n               ,\"<name>..rep..</name>\"                                                                          \n               ,\"<visibility>1</visibility>\"                                                                    \n               ,\"<open>0</open>\"                                                                                \n               ,\"<atom:author><atom:name>..rep..</atom:name></atom:author>\"                                     \n               ,\"<atom:link href='..rep..'/>\"                                                                   \n               ,\"<address>..rep..</address>\"                                                                    \n               ,\"<xal:AddressDetails>..rep..</xal:AddressDetails>\"                                              \n               ,\"<phoneNumber>..rep..</phoneNumber>\"                                                            \n               ,\"<Snippet maxLines='2'>..rep..</Snippet>\"                                                       \n               ,\"<description>..rep..</description>\"                                                            \n               ,\"<AbstractView>#..rep..</AbstractView>\"                                                         \n               ,\"<TimePrimitive><TimeStamp><when>..rep..</when></TimeStamp></TimePrimitive>\"                    \n               ,\"<TimePrimitive><TimeSpan><begin>..repa..</begin><end>..repb..</end></TimeSpan></TimePrimitive>\"\n               ,\"<styleUrl>#..rep..</styleUrl>\"                                                                 \n               ,\"<Region>..rep..</Region>\"                                                                      \n               ,\"<ExtendedData>..rep..</ExtendedData>\"                                                          \n               ,\"<refreshVisibility>..rep..</refreshVisibility>\"                                                \n               ,\"<flyToView>..rep..</flyToView>\"                                                                \n               ,\"<Link>\"                                                                                        \n               ,\"<href>..rep..</href>\"                                                                          \n               ,\"<refreshMode>..rep..</refreshMode>\"                                                            \n               ,\"<refreshInterval>..rep..</refreshInterval>\"                                                    \n               ,\"<viewRefreshMode>..rep..</viewRefreshMode>\"                                                    \n               ,\"<viewRefreshTime>..rep..</viewRefreshTime>\"                                                    \n               ,\"<viewBoundScale>..rep..</viewBoundScale>\"                                                      \n               ,\"<viewFormat>..rep..</viewFormat>\"                                                              \n               ,\"<httpQuery>..rep..</httpQuery>\"                                                                \n               ,\"</Link>\"                                                                                       \n               ,\"</NetworkLink>\")\n    #Variable list\n\n       \n    name = NULL                     # string\n    visibility = 1                  # boolean (0-invisible or 1-visible)\n    open = 0                        # boolean (0-closed or 1-open  in kml object tree)\n    atomauthor = NULL    \t          # xmlns:atom \n    atomlinkhref = NULL             # xmlns:atom\n    address = NULL                  # string\n    xalAddressDetails = NULL        # xmlns:xal\n    phoneNumber = NULL              # string\n    Snippet = NULL                  # string with lines seperated by \\n for nice format exa. \"Hello World\\nThis is my\\nPlace \n    description = NULL              # string that may contain CDATA. See CDATA section for more info\n    AbstractView = NULL             # string id (CameraID or LookAtID) must add with createCamera(id, ...) or createLookAt(id, ...)\n    TimeStamp = NULL                # string of date-time in one of the following formats: (YYYY)(YYYY-MM)(YYYY-MM-DD)(YYYY-MM-DDThh:mm:ssZ)(YYYY-MM-DDThh:mm:ss)\n    TimeSpanStart = NULL            # string of date-time in one of the following formats(overides TimeStamp): (YYYY)(YYYY-MM)(YYYY-MM-DD)(YYYY-MM-DDThh:mm:ssZ)(YYYY-MM-DDThh:mm:ss)\n    TimeSpanEnd = NULL              # string of date-time in one of the following formats(overides TimeStamp): (YYYY)(YYYY-MM)(YYYY-MM-DD)(YYYY-MM-DDThh:mm:ssZ)(YYYY-MM-DDThh:mm:ss)  \n    styleUrl = NULL                 # string id (StyleID) must add with createStyle(id, ...)\n    id = NULL                       # Point ID\n    Region = NULL                   # Currently not supported\n    ExtendedData = NULL             # Currently not supported\n    refreshVisibility = NULL\n    flyToView = NULL  #0 or 1 1=fly to networklinks controll view if exists eles to first child\n\n    refreshMode = NULL #\"onChange\" #onChange, onInterval, or onExpire\n    refreshInterval = NULL # 4\n    viewRefreshMode = NULL #\"never\" #never, onStop, onRequest, onRegion\n  viewRefreshTime = NULL #4\n  viewBoundScale = NULL #1\n  viewFormat = NULL #BBOX=[bboxWest],[bboxSouth],[bboxEast],[bboxNorth]</viewFormat>\n  httpQuery = NULL\n  \n  #New 2015\n  inFolder = NULL\n  \n  #Assign values to variables\n    \n    \n    \n    points = mpoints\n    if(length(args)>0){\n      for(j in 1:length(args)){\n        assign(names(args[j]), args[[j]][1]) \n      }\n    }\n \n \n    ind = grep(\"<name>\", points)\n    if(!is.null(name)) points[ind] = gsub(\"..rep..\", name, points[ind])\n    else points = points[-ind]\n    \n    \n    if(!is.null(visibility)){\n      visibility = as.numeric(as.character(visibility))\n      if(! (visibility==0 | visibility==1)) throw(\"visibility must be either 0 or 1 (boolean)\")\n      ind = grep(\"visibility\", points)\n      points[ind] = gsub(\"1\", visibility, points[ind])\n    }\n    \n    \n    if(!is.null(open)){\n      open = as.numeric(as.character(open))\n      if(! (open==0 | open==1)) throw(\"open must be either 0 or 1 (boolean)\")\n      ind = grep(\"open\", points)\n      points[ind] = gsub(\"0\", open, points[ind])\n    }\n    \n    ind = grep(\"atom:author\", points)\n    if(!is.null(atomauthor)) points[ind] = gsub(\"..rep..\", atomauthor, points[ind])\n    else points = points[-ind]\n    \n    ind = grep(\"atom:link\", points)\n    if(!is.null(atomlinkhref)) points[ind] = gsub(\"..rep..\", atomlinkhref, points[ind])\n    else points = points[-ind]\n    \n    ind = grep(\"xal:AddressDetails\", points)\n    if(!is.null(xalAddressDetails)) points[ind] = gsub(\"..rep..\", xalAddressDetails, points[ind])\n    else points = points[-ind]\n    \n    ind = grep(\"address\", points)\n    if(!is.null(address)) points[ind] = gsub(\"..rep..\", address, points[ind])\n    else points = points[-ind]\n    \n    ind = grep(\"phoneNumber\", points)\n    if(!is.null(phoneNumber)) points[ind] = gsub(\"..rep..\", phoneNumber, points[ind])\n    else points = points[-ind]\n    \n    \n    ind = grep(\"Snippet\", points)\n    if(!is.null(Snippet)){\n      Snippet = as.character(Snippet)\n      maxlines = length(unlist(strsplit(Snippet, \"\\n\")))\n      points[ind] = gsub(\"2\", maxlines, points[ind])\n      points[ind] = gsub(\"..rep..\", Snippet, points[ind])\n    }\n    else points = points[-ind]\n    \n    \n    ind = grep(\"description\", points)\n    if(!is.null(description)) points[ind] = gsub(\"..rep..\", description, points[ind])\n    else points = points[-ind]\n    \n  ind = grep(\"AbstractView\", points)\n  if(!is.null(AbstractView)){\n    tmp = this\n    while(!is.null(tmp$.parent)) tmp = tmp$.parent\n    if(!AbstractView %in% names(tmp$.Aviewlist))warning(paste(\"No Abstractview id found for '\", AbstractView, \"'. You must create an abstractview with yourkmlobj$addAbstractView(id = '\", AbstractView,\"').\", sep = \"\"))\n    reptxt = tmp$.Aviewlist[[AbstractView]]\n    points[ind] = paste(reptxt, collapse = \"\")\n  }\n  else points = points[-ind]\n  \n    \n    #TODO Add time format check!\n    ind = grep(\"TimeStamp\", points)\n    if(!is.null(TimeStamp)) points[ind] = gsub(\"..rep..\", TimeStamp, points[ind])\n    else points = points[-ind]\n    \n    \n    #TODO Add time format check!\n    ind = grep(\"TimeSpan\", points)\n    if(!(is.null(TimeSpanStart) & is.null(TimeSpanEnd))){\n      if(!is.null(TimeSpanStart)) points[ind] = gsub(\"..repa..\", TimeStamp, points[ind])\n      else gsub(\"<begin>..repa..</begin>\", \"\", points[ind])\n      if(!is.null(TimeSpanEnd)) points[ind] = gsub(\"..repb..\", TimeStamp, points[ind])\n      else gsub(\"<end>..repb..</end>\", \"\", points[ind])\n    }\n    else points = points[-ind]\n    \n  #New 2015. define containing folder   \n  \n  if(!is.null(inFolder)){\n    \n    ssp = unlist(strsplit(as.character(inFolder), \"/\"))\n    ftmp = this\n    while(!is.null(ftmp$.parent)) ftmp = ftmp$.parent\n    for(k in 1:length(ssp)){\n      if(is.null(ftmp$getFolder(ssp[k])))\n        ftmp$addFolder(ssp[k], name = ssp[k])\n      ftmp = ftmp$getFolder(ssp[k])\n    }\n    \n  } \n  \n  \n    ind = grep(\"styleUrl\", points)\n    if(!is.null(styleUrl)){\n      points[ind] = gsub(\"..rep..\", styleUrl, points[ind])\n      tmp = this\n      while(!is.null(tmp$.parent)) tmp = tmp$.parent\n      if(!styleUrl %in% names(tmp$.styles))warning(paste(\"No style id found for '\", styleUrl, \"'. You must create a style with yourkmlobj$createStyle(id = '\", styleUrl,\"').\", sep = \"\"))\n    }\n    else points = points[-ind]\n      \n    \n    ind = grep(\"Region\", points)\n    if(!is.null(Region)) points[ind] = gsub(\"..rep..\", Region, points[ind])\n    else points = points[-ind]\n  \n    ind = grep(\"ExtendedData\", points)\n    if(!is.null(ExtendedData)) points[ind] = gsub(\"..rep..\", ExtendedData, points[ind])\n    else points = points[-ind]\n   \n  \n  ind = grep(\"refreshVisibility\", points)\n  \n  if(!is.null(refreshVisibility)){\n    if(! (refreshVisibility == 0 | refreshVisibility == 1 ))throw(\"refreshVisibility must be 1 or 0\")\n    points[ind] = gsub(\"..rep..\", refreshVisibility, points[ind])\n  }\n  else points = points[-ind]\n\n  ind = grep(\"flyToView\", points)\n  if(!is.null(flyToView)){\n    if(! (flyToView == 0 | flyToView == 1 ))throw(\"flyToView must be 1 or 0\")\n    points[ind] = gsub(\"..rep..\", flyToView, points[ind])\n  }\n  else points = points[-ind]\n\n\n  ind = grep(\"<href>\", points)\n\n  if(!is.null(href)) points[ind] = gsub(\"..rep..\", href, points[ind])\n  else points = points[-ind]\n\n  ind = grep(\"refreshMode\", points)\n  if(!is.null(refreshMode)){\n    if(! (refreshMode == \"onchange\" | refreshMode == \"onInterval\" | refreshMode == \"onExpire\" ))throw(\"refreshMode must be onChange, onInterval oronExpire\")\n    points[ind] = gsub(\"..rep..\", refreshMode, points[ind])\n  }\n  else points = points[-ind]\n  \n  \n\n  ind = grep(\"viewRefreshMode\", points)\n  if(!is.null(viewRefreshMode)){\n    if(! (viewRefreshMode == \"onStop\" | viewRefreshMode == \"onRequest\" | viewRefreshMode == \"onRegion\" | viewRefreshMode == \"never\"))throw(\"viewRefreshMode must be onStop, onRequest, onRegion or never\")\n    points[ind] = gsub(\"..rep..\", viewRefreshMode, points[ind])\n  }\n  else points = points[-ind]\n  \n  \n    ind = grep(\"refreshInterval\", points)\n  if(!is.null(refreshInterval)){\n    if(is.na(as.numeric(as.character(refreshInterval)))) throw(\"refreshInterval must be numeric or coerceable to numeric\")\n    points[ind] = gsub(\"..rep..\", refreshInterval, points[ind])\n  }\n  else points = points[-ind]  \n    \n    \n    \n    \n  \n  ind = grep(\"viewRefreshTime\", points)\n  if(!is.null(viewRefreshTime)){\n    if(is.na(as.numeric(as.character(viewRefreshTime)))) throw(\"viewRefreshTime must be numeric or coerceable to numeric\")\n    \n  points[ind] = gsub(\"..rep..\", viewRefreshTime, points[ind])\n  }\n  else points = points[-ind]\n\n  \n  ind = grep(\"viewBoundScale\", points)\n  if(!is.null(viewBoundScale)){\n    if(is.na(as.numeric(as.character(viewBoundScale)))) throw(\"viewBoundScale must be numeric or coerceable to numeric\")\n    \n    points[ind] = gsub(\"..rep..\", viewBoundScale, points[ind])\n  }\n    else points = points[-ind]\n  \n  ind = grep(\"viewFormat\", points)\n  if(!is.null(viewFormat)) points[ind] = gsub(\"..rep..\", viewFormat, points[ind])\n  else points = points[-ind]\n  \n  ind = grep(\"httpQuery\", points)\n  if(!is.null(httpQuery)) points[ind] = gsub(\"..rep..\", httpQuery, points[ind])\n  else points = points[-ind]\n    \n  #New 2015. define containing folder   \n  \n  if(!is.null(inFolder)){\n    \n    ssp = unlist(strsplit(as.character(inFolder), \"/\"))\n    ftmp = this\n    while(!is.null(ftmp$.parent)) ftmp = ftmp$.parent\n    for(k in 1:length(ssp)){\n      if(is.null(ftmp$getFolder(ssp[k])))\n        ftmp$addFolder(ssp[k], name = ssp[k])\n      ftmp = ftmp$getFolder(ssp[k])\n    }\n    \n  }\n  \n    ind = grep(\"NetworkLink id\", points)\n    \n  if(is.null(id)){\n    \n    ##ADDED 2015 condition\n    if(is.null(inFolder)){\n      points[ind] = gsub(\"..rep..\", as.character(length(this$.points)+1), points[ind])\n      this$.points[[as.character(length(this$.points)+1)]] = points\n    }\n    else{ \n      points[ind] = gsub(\"..rep..\", as.character(length(ftmp$.points)+1), points[ind])\n      ftmp$.points[[as.character(length(ftmp$.points)+1)]] = points\n    }\n  }\n  else{\n    \n    ##ADDED 2015 condition\n    if(is.null(inFolder)){\n      points[ind] = gsub(\"..rep..\", as.character(id), points[ind])    \n      this$.points[[as.character(id)]] = points\n    }\n    else{\n      points[ind] = gsub(\"..rep..\", as.character(length(ftmp$.points)+1), points[ind])\n      ftmp$.points[[as.character(id)]] = points\n    }\n  }\n  \n#   \n#   if(is.null(id)){\n#       points[ind] = gsub(\"..rep..\", as.character(length(this$.points)+1), points[ind])\n#       this$.points[[as.character(length(this$.points)+1)]] = points\n#     }\n#     else{\n#       points[ind] = gsub(\"..rep..\", as.character(id), points[ind])\n#       this$.points[[as.character(id)]] = points\n#     }\n#     \n#     \n  \n  \n})\nsetMethodS3(\"addNetworkLinkControl\", \"RKmlFolder\", function(this, minRefreshPeriod =NULL, maxSessionLength = -1, cookie = NULL, message = NULL, linkName = NULL, linkDescription = NULL, linkSnippet = NULL, expires = NULL, update = NULL, AbstractView = NULL, ...) {\n \n  style = c( \"<NetworkLinkControl>\"                             \n             ,\"<minRefreshPeriod>..rep..</minRefreshPeriod>\"     \n             ,\"<maxSessionLength>..rep..</maxSessionLength>\"     \n             ,\"<cookie>..rep..</cookie>\"                         \n             ,\"<message>..rep..</message>\"                       \n             ,\"<linkName>..rep..</linkName>\"                     \n             ,\"<linkDescription>..rep..</linkDescription>\"       \n             ,\"<linkSnippet maxLines=\\\"2\\\">..rep..</linkSnippet>\"\n             ,\"<expires>..rep..</expires>\"                       \n             ,\"<Update>..rep..</Update>\"                         \n             ,\"<AbstractView>#..rep..</AbstractView>\"            \n             ,\"</NetworkLinkControl>\")\n\n  ind = grep(\"minRefreshPeriod\", style)\n  if(!is.null(minRefreshPeriod)){\n    if(is.na(as.numeric(as.character(minRefreshPeriod)))) throw(\"minRefreshPeriod must be numeric or coerceable to numeric\")\n    style[ind] = gsub(\"..rep..\", minRefreshPeriod, style[ind])\n  }\n  else style = style[-ind]\n  \n  ind = grep(\"maxSessionLength\", style)\n  if(!is.null(maxSessionLength)){\n    if(is.na(as.numeric(as.character(maxSessionLength)))) throw(\"maxSessionLength must be numeric or coerceable to numeric\")\n    style[ind] = gsub(\"..rep..\", maxSessionLength, style[ind])\n  }\n  else style = style[-ind]\n  \n  ind = grep(\"cookie\", style)\n  if(!is.null(cookie)){\n      style[ind] = gsub(\"..rep..\", cookie, style[ind])\n  }\n  else style = style[-ind]\n  \n  ind = grep(\"message\", style)\n  if(!is.null(message)){\n    style[ind] = gsub(\"..rep..\", message, style[ind])\n  }\n  else style = style[-ind]\n  \n  ind = grep(\"linkName\", style)\n  if(!is.null(linkName)){\n    style[ind] = gsub(\"..rep..\", linkName, style[ind])\n  }\n  else style = style[-ind]\n\n  ind = grep(\"linkDescription\", style)\n  if(!is.null(linkDescription)){\n    style[ind] = gsub(\"..rep..\", linkDescription, style[ind])\n  }\n  else style = style[-ind]\n    \n  \n  ind = grep(\"linkSnippet\", style)\n  if(!is.null(linkSnippet)){\n    linkSnippet = as.character(linkSnippet)\n    maxlines = length(unlist(strsplit(linkSnippet, \"\\n\")))\n    style[ind] = gsub(\"2\", maxlines, style[ind])\n    style[ind] = gsub(\"..rep..\", linkSnippet, style[ind])\n  }\n  else style = style[-ind]\n  \n  \n  ind = grep(\"expires\", style)\n  if(!is.null(expires)){\n    style[ind] = gsub(\"..rep..\", expires, style[ind])\n  }\n  else style = style[-ind]\n\n  \n  ind = grep(\"Update\", style)\n  if(!is.null(update)){\n    style[ind] = gsub(\"..rep..\", update, style[ind])\n  }\n  else style = style[-ind]\n  \n  \n  ind = grep(\"AbstractView\", style)\n  if(!is.null(AbstractView)){\n    tmp = this\n    while(!is.null(tmp$.parent)) tmp = tmp$.parent\n    if(!AbstractView %in% names(tmp$.Aviewlist))warning(paste(\"No Abstractview id found for '\", AbstractView, \"'. You must create an abstractview with yourkmlobj$addAbstractView(id = '\", AbstractView,\"').\", sep = \"\"))\n    reptxt = tmp$.Aviewlist[[AbstractView]]\n    style[ind] = paste(reptxt, collapse = \"\")\n  }\n  else style = style[-ind]\n  \n\n\n  tmp = this\n  while(!is.null(tmp$.parent)) tmp = tmp$.parent\n  \n\n  tmp$.networkcontroltxt = paste(style, collapse = \"\")\n\n   \n  \n})\nsetMethodS3(\"writekml\", \"RKmlFolder\", function(this, path, ...) {\n  \n  if(dirname(path) != \".\")dir.create(dirname(path), recursive = T, showWarnings = F)\n\n\n  zz = file(path, \"w\")\n  sta = \"<?xml version='1.0' encoding='UTF-8'?>\n    <kml xmlns='http://www.opengis.net/kml/2.2' xmlns:gx='http://www.google.com/kml/ext/2.2' xmlns:kml='http://www.opengis.net/kml/2.2' xmlns:atom='http://www.w3.org/2005/Atom'>\"\n  sta = paste(sta, this$.networkcontroltxt, sep = \"\")\n  sta = paste(sta, \"<Document id='..rep..'><open>1</open>\", sep = \"\")\n  sta = gsub(\"..rep..\", this$.id, sta)\n  writeLines(sta, zz)\n  close(zz)\n  \n  zz = file(path, \"a\")\n  \n  i = 1\n  while(i <= length(this$.styles)){\n    writeLines(this$.styles[[i]], zz)\n    i = i + 1\n  }\n\n\n  \n  \n  i = 1\n  while(i <= length(this$.points)){\n    writeLines(this$.points[[i]], zz)\n    i = i + 1\n  }\n  close(zz)\n  \n  i = 1\n  \n  while(i <= length(this$.folders)){\n    this$.folders[[i]]$printcontents(path = path)\n    i = i+1\n  }\n  \n  zz = file(path, \"a\")\n  end = \"</Document></kml>\"\n  writeLines(end, zz)\n  close(zz)\n  message(paste(\"kml saved at\", path))\n\n\n})\nsetMethodS3(\"printcontents\", \"RKmlFolder\", function(this, path, ...) {\n \n  zz = file(path, \"a\")\n  \n  writeLines(this$.foldertxt, zz)\n  \n  i = 1\n  while(i <= length(this$.points)){\n    writeLines(this$.points[[i]], zz)\n    i = i + 1\n  } \n  close(zz)\n  \n  i = 1\n  while(i <= length(this$.folders)){\n    this$.folders[[i]]$printcontents(path = path)\n    i = i + 1\n  }\n  zz = file(path, \"a\")\n  writeLines(\"</Folder>\", zz)\n  close(zz)\n  \n})\nsetMethodS3(\"preview\", \"RKmlFolder\", function(this, ...) {\n\n  #zz = tempdir()\n  \n  #if (!file.exists(zz)){\n  #  dir.create(zz, recursive = T)\n  #}\n  \n  #zz = file.path(zz, \"tempkml.kml\")\n   zz = \"temp_kmlbuilder.kml\"\n  this$writekml(zz)\n\n  browseURL(zz)\n  \n\n})\nsetMethodS3(\"saveStyle\", \"RKmlFolder\", function(this, path, ...) {\n  \n  if(dirname(path) != \".\")dir.create(dirname(path), recursive = T, showWarnings = F)\n  saveRDS(this$.styles, file = path)\n  \n})\nsetMethodS3(\"loadStyle\", \"RKmlFolder\", function(this, path, ...) {\n  \n  tempstyle = readRDS(path)\n  for(i in 1:length(names(tempstyle))){\n    nam = names(tempstyle)[i]\n    if(nam %in% names(this$.styles)){\n      warning(paste(\"The style for \", nam, \" already exists in this kml object and will not be added.\", sep = \"\"))\n    }\n    else{\n      this$.styles[length(this$.styles)+1] = tempstyle[i]\n      names(this$.styles)[length(this$.styles)] = nam\n    }          \n  }\n  \n})\ncolor2kmlcolor = function(color = \"\", transparency = NULL) {\n  \n  overridetrans = FALSE\n  if(is.null(transparency)){\n    transparency = 1\n    overridetrans = TRUE\n  }\n  if(!is.null(color))if(color == \"\")color = NULL\n  tra = as.hexmode(round(as.numeric(transparency)*255))\n  if(nchar(tra) == 1) tra = paste(\"0\", tra, sep = \"\")\n  if(!is.null(color)){\n    if(color %in% colors()){\n      color = col2rgb(color)\n      color = as.character(as.hexmode(color))\n      if(nchar(color[1]) == 1) color[1] = paste(\"0\", color[1], sep = \"\")\n      if(nchar(color[2]) == 1) color[2] = paste(\"0\", color[2], sep = \"\")\n      if(nchar(color[3]) == 1) color[3] = paste(\"0\", color[3], sep = \"\")\n      color = paste(color[3], color[2], color[1], sep=\"\")\n    }\n    else if(length(color)>2){\n      color = as.character(as.hexmode(color))\n      if(nchar(color[1]) == 1) color[1] = paste(\"0\", color[1], sep = \"\")\n      if(nchar(color[2]) == 1) color[2] = paste(\"0\", color[2], sep = \"\")\n      if(nchar(color[3]) == 1) color[3] = paste(\"0\", color[3], sep = \"\")\n      color = paste(color[3], color[2], color[1], sep=\"\")\n    }\n    else if(grepl(\"#\", color)){\n      if(nchar(color) == 9){\n        if(overridetrans){ \n          tra = substr(color, 2, 3)\n        }\n        color = paste(substr(color, 8, 9), substr(color, 6, 7), substr(color, 4, 5), sep = \"\")\n      }\n      else{\n        color = paste(substr(color, 6, 7), substr(color, 4, 5), substr(color, 2, 3), sep = \"\")\n      }\n    }\n    color = tolower(paste(\"#\", tra, color, sep=\"\"))\n    \n  }\nreturn(color)\n} \nmodmod = function(veclen = 0, cyclelen = 0) {\n  x = veclen %% cyclelen\n  if(x == 0) x = cyclelen\n  \n  return(x)\n  \n}",
    "created" : 1463673668647.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "208808669",
    "id" : "D3B35971",
    "lastKnownWriteTime" : 1463673637,
    "path" : "J:/kmlbuilder/R/RKml.r",
    "project_path" : "R/RKml.r",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}